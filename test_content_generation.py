#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram –±–æ—Ç–æ–º
"""

import requests
import json
from datetime import datetime, timedelta
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8000"
TEST_CHANNEL_ID = "-1001234567890"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞

def test_api_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API...")
    try:
        response = requests.get(f"{API_BASE_URL}/api/stats")
        if response.status_code == 200:
            print("‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_content_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    print("\nüé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    
    audiences = ["–ù–æ–≤–∏—á–∫–∏ –≤ –¥–∏–∑–∞–π–Ω–µ", "Junior –¥–∏–∑–∞–π–Ω–µ—Ä—ã", "–§—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã", "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏"]
    content_types = ["–ü—Ä–æ–±–ª–µ–º–∞", "–†–µ—à–µ–Ω–∏–µ", "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫—É—Ä—Å–∞", "–ö–µ–π—Å", "–°–æ–≤–µ—Ç", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è"]
    
    for audience in audiences:
        print(f"\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏—é: {audience}")
        for content_type in content_types:
            try:
                response = requests.post(f"{API_BASE_URL}/api/content/generate", json={
                    "audience_group": audience,
                    "content_type": content_type,
                    "channel_id": TEST_CHANNEL_ID,
                    "custom_prompt": ""
                })
                
                if response.status_code == 200:
                    data = response.json()
                    if data["status"] == "success":
                        print(f"  ‚úÖ {content_type}: OK")
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                        if audience == "–ù–æ–≤–∏—á–∫–∏ –≤ –¥–∏–∑–∞–π–Ω–µ" and content_type == "–ü—Ä–æ–±–ª–µ–º–∞":
                            print(f"     –ü—Ä–∏–º–µ—Ä: {data['content'][:100]}...")
                    else:
                        print(f"  ‚ùå {content_type}: {data.get('detail', 'Unknown error')}")
                else:
                    print(f"  ‚ùå {content_type}: HTTP {response.status_code}")
                    
            except Exception as e:
                print(f"  ‚ùå {content_type}: {e}")
            
            time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

def test_batch_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞–∫–µ—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"""
    print("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3 –ø–æ—Å—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        for audience in ["–ù–æ–≤–∏—á–∫–∏ –≤ –¥–∏–∑–∞–π–Ω–µ", "Junior –¥–∏–∑–∞–π–Ω–µ—Ä—ã"]:
            print(f"\nüéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç –¥–ª—è: {audience}")
            
            posts = []
            for i in range(3):
                response = requests.post(f"{API_BASE_URL}/api/content/generate", json={
                    "audience_group": audience,
                    "content_type": "–ü—Ä–æ–±–ª–µ–º–∞",  # –ü—Ä–æ—Å—Ç–æ–π —Ç–∏–ø –¥–ª—è —Ç–µ—Å—Ç–∞
                    "channel_id": TEST_CHANNEL_ID,
                    "custom_prompt": ""
                })
                
                if response.status_code == 200:
                    data = response.json()
                    if data["status"] == "success":
                        posts.append(data["content"])
                        print(f"  ‚úÖ –ü–æ—Å—Ç {i+1} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                    else:
                        print(f"  ‚ùå –ü–æ—Å—Ç {i+1}: {data.get('detail', 'Error')}")
                else:
                    print(f"  ‚ùå –ü–æ—Å—Ç {i+1}: HTTP {response.status_code}")
                
                time.sleep(0.5)
            
            print(f"  üìä –í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(posts)} –ø–æ—Å—Ç–æ–≤")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

def test_content_publishing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    
    try:
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ—Å—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        tomorrow = datetime.now() + timedelta(days=1)
        
        response = requests.post(f"{API_BASE_URL}/api/content/publish", json={
            "audience_group": "–ù–æ–≤–∏—á–∫–∏ –≤ –¥–∏–∑–∞–π–Ω–µ",
            "content_type": "–ü—Ä–æ–±–ª–µ–º–∞",
            "channel_id": TEST_CHANNEL_ID,
            "scheduled_time": tomorrow.isoformat(),
            "custom_prompt": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã"
        })
        
        if response.status_code == 200:
            data = response.json()
            if data["status"] == "success":
                print(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! ID –ø–æ—Å—Ç–∞: {data['post_id']}")
                print(f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞: {tomorrow.strftime('%Y-%m-%d %H:%M')}")
                return data['post_id']
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {data.get('detail', 'Unknown error')}")
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
    
    return None

def test_analytics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
    
    try:
        response = requests.get(f"{API_BASE_URL}/api/content/analytics")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
            print(f"   üìù –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {data['total_posts']}")
            print(f"   ‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {data['published_posts']}")
            print(f"   ‚ùå –û—à–∏–±–æ–∫: {data['failed_posts']}")
            print(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {data['success_rate']:.1f}%")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")

def test_dashboard_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –¥–∞—à–±–æ—Ä–¥–æ–º"""
    print("\nüñ•Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥–∞—à–±–æ—Ä–¥–æ–º...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞—à–±–æ—Ä–¥–∞
        response = requests.get(f"{API_BASE_URL}/")
        if response.status_code == 200:
            print("‚úÖ –î–∞—à–±–æ—Ä–¥ –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print(f"‚ùå –î–∞—à–±–æ—Ä–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoints –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
        endpoints = [
            "/api/channels",
            "/api/content/audiences", 
            "/api/content/types"
        ]
        
        for endpoint in endpoints:
            try:
                response = requests.get(f"{API_BASE_URL}{endpoint}")
                if response.status_code == 200:
                    print(f"  ‚úÖ {endpoint}: OK")
                else:
                    print(f"  ‚ùå {endpoint}: {response.status_code}")
            except Exception as e:
                print(f"  ‚ùå {endpoint}: {e}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not test_api_connection():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    test_content_generation()
    test_batch_generation()
    post_id = test_content_publishing()
    test_analytics()
    test_dashboard_integration()
    
    print("\n" + "=" * 60)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    if post_id:
        print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {post_id}")
    
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ –¥–∞—à–±–æ—Ä–¥: http://localhost:8000")
    print("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞'")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤")

if __name__ == "__main__":
    main() 