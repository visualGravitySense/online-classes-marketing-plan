#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –±–æ—Ç–æ–º
"""

import requests
import json
import time
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:5001"
TEST_USERNAME = "admin"
TEST_PASSWORD = "admin123"

class IntegrationTester:
    def __init__(self):
        self.session = requests.Session()
        self.base_url = API_BASE_URL
    
    def login(self):
        """–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"""
        print("üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...")
        
        try:
            response = self.session.post(f"{self.base_url}/login", data={
                'username': TEST_USERNAME,
                'password': TEST_PASSWORD
            })
            
            if response.status_code == 200:
                print("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {response.status_code}")
                return False
        except requests.exceptions.ConnectionError:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API —Å–µ—Ä–≤–µ—Ä—É")
            print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:5000")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")
            return False
    
    def test_dashboard(self):
        """–¢–µ—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞"""
        print("\nüìä –¢–µ—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞...")
        
        try:
            response = self.session.get(f"{self.base_url}/api/universal-bot/dashboard")
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    dashboard = data['data']
                    print("‚úÖ –î–∞—à–±–æ—Ä–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    print(f"   –ö–∞–º–ø–∞–Ω–∏–π: {dashboard['campaigns']['total']}")
                    print(f"   –ü–æ—Å—Ç–æ–≤: {dashboard['posts']['total']}")
                    print(f"   –ö–∞–Ω–∞–ª–æ–≤: {dashboard['channels']['total']}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞: {data.get('error')}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
            return False
    
    def test_campaigns(self):
        """–¢–µ—Å—Ç –∫–∞–º–ø–∞–Ω–∏–π"""
        print("\nüéØ –¢–µ—Å—Ç –∫–∞–º–ø–∞–Ω–∏–π...")
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π
            response = self.session.get(f"{self.base_url}/api/universal-bot/campaigns")
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    campaigns = data['data']
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–∞–º–ø–∞–Ω–∏–π: {len(campaigns)}")
                    
                    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏
                    new_campaign = {
                        'name': f'–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è {datetime.now().strftime("%H:%M:%S")}',
                        'description': '–ö–∞–º–ø–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
                        'channels': []
                    }
                    
                    response = self.session.post(
                        f"{self.base_url}/api/universal-bot/campaigns",
                        json=new_campaign
                    )
                    
                    if response.status_code == 200:
                        data = response.json()
                        if data.get('success'):
                            campaign_id = data['data']['id']
                            print(f"‚úÖ –ö–∞–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞: {campaign_id}")
                            
                            # –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏
                            response = self.session.post(
                                f"{self.base_url}/api/universal-bot/campaigns/{campaign_id}/start"
                            )
                            
                            if response.status_code == 200:
                                print("‚úÖ –ö–∞–º–ø–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
                            else:
                                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é: {response.status_code}")
                            
                            return True
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏: {data.get('error')}")
                            return False
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: {response.status_code}")
                        return False
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π: {data.get('error')}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–∞–º–ø–∞–Ω–∏–π: {e}")
            return False
    
    def test_channels(self):
        """–¢–µ—Å—Ç –∫–∞–Ω–∞–ª–æ–≤"""
        print("\nüì¢ –¢–µ—Å—Ç –∫–∞–Ω–∞–ª–æ–≤...")
        
        try:
            response = self.session.get(f"{self.base_url}/api/universal-bot/channels")
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    channels = data['data']
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}")
                    
                    for channel in channels[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        print(f"   - {channel['name']} ({channel['status']})")
                    
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {data.get('error')}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return False
    
    def test_posts(self):
        """–¢–µ—Å—Ç –ø–æ—Å—Ç–æ–≤"""
        print("\nüìù –¢–µ—Å—Ç –ø–æ—Å—Ç–æ–≤...")
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤
            response = self.session.get(f"{self.base_url}/api/universal-bot/posts")
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    posts = data['data']
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}")
                    
                    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
                    new_post = {
                        'content': f'–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç {datetime.now().strftime("%H:%M:%S")} - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏!',
                        'campaign': 'default',
                        'channels': []
                    }
                    
                    response = self.session.post(
                        f"{self.base_url}/api/universal-bot/posts",
                        json=new_post
                    )
                    
                    if response.status_code == 200:
                        data = response.json()
                        if data.get('success'):
                            post_id = data['data']['id']
                            print(f"‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω: {post_id}")
                            return True
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {data.get('error')}")
                            return False
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: {response.status_code}")
                        return False
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {data.get('error')}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ—Å—Ç–æ–≤: {e}")
            return False
    
    def test_content_generator(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        print("\n‚ú® –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        try:
            content_request = {
                'topic': 'UX/UI –¥–∏–∑–∞–π–Ω –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö',
                'campaign': 'default',
                'tone': 'friendly',
                'length': 'medium',
                'target_audience': '–Ω–∞—á–∏–Ω–∞—é—â–∏–µ –¥–∏–∑–∞–π–Ω–µ—Ä—ã',
                'platform': 'telegram',
                'include_hashtags': True,
                'include_call_to_action': True
            }
            
            response = self.session.post(
                f"{self.base_url}/api/universal-bot/generate-content",
                json=content_request
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    content = data['data']
                    print("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                    print(f"   –î–ª–∏–Ω–∞: {len(content['content'])} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"   –•–µ—à—Ç–µ–≥–∏: {len(content.get('hashtags', []))}")
                    print(f"   –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é: {'–î–∞' if content.get('call_to_action') else '–ù–µ—Ç'}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {data.get('error')}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
            return False
    
    def test_system_status(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        print("\n‚öôÔ∏è  –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            response = self.session.get(f"{self.base_url}/api/universal-bot/system-status")
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    status = data['data']
                    print("‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—É—á–µ–Ω")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                    schedulers = status.get('schedulers', {})
                    print(f"   –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏: {len(schedulers)}")
                    
                    content_gen = status.get('content_generator', {})
                    print(f"   –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_gen.get('status', 'unknown')}")
                    
                    database = status.get('database', {})
                    print(f"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {database.get('status', 'unknown')}")
                    
                    telegram_api = status.get('telegram_api', {})
                    print(f"   Telegram API: {telegram_api.get('status', 'unknown')}")
                    
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {data.get('error')}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False
    
    def test_frontend_pages(self):
        """–¢–µ—Å—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å—Ç—Ä–∞–Ω–∏—Ü"""
        print("\nüåê –¢–µ—Å—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å—Ç—Ä–∞–Ω–∏—Ü...")
        
        pages = [
            '/universal-bot',
            '/universal-bot/campaigns',
            '/universal-bot/posts',
            '/universal-bot/generator'
        ]
        
        success_count = 0
        
        for page in pages:
            try:
                response = self.session.get(f"{self.base_url}{page}")
                
                if response.status_code == 200:
                    print(f"‚úÖ {page} - –¥–æ—Å—Ç—É–ø–Ω–∞")
                    success_count += 1
                else:
                    print(f"‚ùå {page} - –æ—à–∏–±–∫–∞ {response.status_code}")
            except Exception as e:
                print(f"‚ùå {page} - –æ—à–∏–±–∫–∞: {e}")
        
        return success_count == len(pages)
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        print("=" * 50)
        
        # –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
        if not self.login():
            return False
        
        # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
        tests = [
            ("–î–∞—à–±–æ—Ä–¥", self.test_dashboard),
            ("–ö–∞–º–ø–∞–Ω–∏–∏", self.test_campaigns),
            ("–ö–∞–Ω–∞–ª—ã", self.test_channels),
            ("–ü–æ—Å—Ç—ã", self.test_posts),
            ("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞", self.test_content_generator),
            ("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", self.test_system_status),
            ("–§—Ä–æ–Ω—Ç–µ–Ω–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", self.test_frontend_pages)
        ]
        
        results = []
        
        for test_name, test_func in tests:
            try:
                result = test_func()
                results.append((test_name, result))
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
                results.append((test_name, False))
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "=" * 50)
        print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í")
        print("=" * 50)
        
        passed = 0
        total = len(results)
        
        for test_name, result in results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"{test_name:<25} {status}")
            if result:
                passed += 1
        
        print("=" * 50)
        print(f"–ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed == total:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        
        return passed == total

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1 and sys.argv[1] in ['-h', '--help', 'help']:
        print("""
üß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –±–æ—Ç–æ–º

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python test_integration.py

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - –ó–∞–ø—É—â–µ–Ω–Ω—ã–π API —Å–µ—Ä–≤–µ—Ä –Ω–∞ http://localhost:5000
    - –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
    - –î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

–¢–µ—Å—Ç—ã:
    - –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
    - –î–∞—à–±–æ—Ä–¥
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏—è–º–∏
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏
    - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    - –§—Ä–æ–Ω—Ç–µ–Ω–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """)
        return
    
    tester = IntegrationTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("   –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    else:
        print("\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ª–æ–≥–∏")

if __name__ == "__main__":
    main() 