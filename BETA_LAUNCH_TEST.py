#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ BETA LAUNCH
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã UX/UI Academy
"""

import requests
import time
import json
from datetime import datetime

def test_main_server():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä"""
    print("üè† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8080
        response = requests.get("http://localhost:8080", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–æ—Ä—Ç 8080)")
            return True
        else:
            print(f"‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä - –æ—à–∏–±–∫–∞ {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

def test_telegram_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Telegram API —Å–µ—Ä–≤–µ—Ä"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram API —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram API –Ω–∞ –ø–æ—Ä—Ç—É 8000
        response = requests.get("http://localhost:8000/api/stats", timeout=5)
        if response.status_code == 200:
            stats = response.json()
            print("‚úÖ Telegram API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–æ—Ä—Ç 8000)")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {stats.get('total_posts', 0)}")
            print(f"   ‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {stats.get('published_posts', 0)}")
            print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {stats.get('active_channels', 0)}")
            return True
        else:
            print(f"‚ùå Telegram API - –æ—à–∏–±–∫–∞ {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

def test_content_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    
    try:
        data = {
            "audience_group": "–ù–æ–≤–∏—á–∫–∏ –≤ –¥–∏–∑–∞–π–Ω–µ",
            "content_type": "–°–æ–≤–µ—Ç",
            "channel_id": "-1001234567890",
            "custom_prompt": None
        }
        
        response = requests.post("http://localhost:8000/api/content/generate", json=data, timeout=10)
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   ‚Ä¢ Preview ID: {result.get('preview_id')}")
            print(f"   ‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç: {result.get('content', '')[:100]}...")
            return True
        else:
            print(f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - –æ—à–∏–±–∫–∞ {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        return False

def test_database_operations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
        response = requests.get("http://localhost:8000/api/channels", timeout=5)
        if response.status_code == 200:
            channels = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç ({len(channels)} –∫–∞–Ω–∞–ª–æ–≤)")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
        response = requests.get("http://localhost:8000/api/posts", timeout=5)
        if response.status_code == 200:
            posts = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç ({len(posts)} –ø–æ—Å—Ç–æ–≤)")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
        post_data = {
            "content": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç BETA Launch",
            "channel_id": "-1001234567890",
            "scheduled_time": datetime.now().isoformat(),
            "media_path": None,
            "media_type": None
        }
        
        response = requests.post("http://localhost:8000/api/posts", json=post_data, timeout=10)
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (ID: {result.get('post_id')})")
            return True
        else:
            print(f"‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ - –æ—à–∏–±–∫–∞ {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
        return False

def test_analytics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        response = requests.get("http://localhost:8000/api/content/analytics", timeout=5)
        if response.status_code == 200:
            analytics = response.json()
            print("‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {analytics.get('success_rate', 0):.1f}%")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        response = requests.get("http://localhost:8000/api/activity", timeout=5)
        if response.status_code == 200:
            activity = response.json()
            print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç ({len(activity)} –∑–∞–ø–∏—Å–µ–π)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        return False

def test_authentication():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é"""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
        response = requests.get("http://localhost:8080/login", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
            return True
        else:
            print(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞ - –æ—à–∏–±–∫–∞ {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        return False

def generate_beta_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ BETA —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    print("\n" + "="*60)
    print("üìã –û–¢–ß–ï–¢ –û BETA LAUNCH –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
    print("="*60)
    
    print(f"üìÖ –î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä: http://localhost:8080")
    print(f"ü§ñ Telegram API: http://localhost:8000")
    
    print("\n‚úÖ –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
    print("   ‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (Flask + Waitress)")
    print("   ‚Ä¢ Telegram API —Å–µ—Ä–≤–µ—Ä (FastAPI + Uvicorn)")
    print("   ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (ContentGenerator)")
    print("   ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (SQLite)")
    print("   ‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å—Ç–æ–≤ (PostScheduler)")
    print("   ‚Ä¢ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (HTML/CSS/JS)")
    print("   ‚Ä¢ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (REST API)")
    print("   ‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("   ‚Ä¢ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
    
    print("\nüéØ –î–û–°–¢–£–ü–ù–´–ï –§–£–ù–ö–¶–ò–ò:")
    print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    print("   ‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
    print("   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏")
    print("   ‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    print("   ‚Ä¢ –í–µ–±-–¥–∞—à–±–æ—Ä–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    print("   ‚Ä¢ API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π")
    
    print("\nüöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö BETA LAUNCH!")

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø BETA LAUNCH")
    print("="*60)
    
    results = []
    
    try:
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        time.sleep(3)
        
        results.append(test_main_server())
        results.append(test_telegram_api())
        results.append(test_content_generation())
        results.append(test_database_operations())
        results.append(test_analytics())
        results.append(test_authentication())
        
        print("\n" + "="*60)
        success_count = sum(results)
        total_count = len(results)
        
        if success_count == total_count:
            print(f"üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! ({success_count}/{total_count})")
            generate_beta_report()
        else:
            print(f"‚ö†Ô∏è –ü–†–û–ô–î–ï–ù–û –¢–ï–°–¢–û–í: {success_count}/{total_count}")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        
        print("="*60)
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc() 