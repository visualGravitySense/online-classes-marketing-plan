#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
"""

import requests
from datetime import datetime

def check_api_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ API"""
    try:
        response = requests.get("http://localhost:8000/api/health", timeout=5)
        if response.status_code == 200:
            return True, "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else:
            return False, f"‚ùå API –æ—à–∏–±–∫–∞: {response.status_code}"
    except Exception as e:
        return False, f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}"

def get_channels_status():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        response = requests.get("http://localhost:8000/api/channels", timeout=10)
        if response.status_code == 200:
            channels = response.json()
            return True, channels
        else:
            return False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {response.status_code}"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞: {e}"

def get_posts_status():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–æ–≤"""
    try:
        response = requests.get("http://localhost:8000/api/posts", timeout=10)
        if response.status_code == 200:
            posts = response.json()
            return True, posts
        else:
            return False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {response.status_code}"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞: {e}"

def analyze_posts(posts):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å—Ç—ã"""
    if not posts:
        return "–ù–µ—Ç –ø–æ—Å—Ç–æ–≤"
    
    total = len(posts)
    published = sum(1 for post in posts if post.get('published', False))
    scheduled = total - published
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞–Ω–∞–ª–∞–º
    channel_stats = {}
    for post in posts:
        channel_id = post.get('channel_id', 'unknown')
        if channel_id not in channel_stats:
            channel_stats[channel_id] = {'total': 0, 'published': 0, 'scheduled': 0}
        
        channel_stats[channel_id]['total'] += 1
        if post.get('published', False):
            channel_stats[channel_id]['published'] += 1
        else:
            channel_stats[channel_id]['scheduled'] += 1
    
    return {
        'total': total,
        'published': published,
        'scheduled': scheduled,
        'channels': channel_stats
    }

def main():
    print("üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´")
    print("="*60)
    print(f"üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    api_ok, api_msg = check_api_health()
    print(f"üîß API: {api_msg}")
    
    if not api_ok:
        print("\n‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: python api.py")
        return
    
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª—ã
    channels_ok, channels_data = get_channels_status()
    if channels_ok:
        print(f"üì¢ –ö–ê–ù–ê–õ–´ ({len(channels_data)}):")
        for channel in channels_data:
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if channel.get('active') else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            print(f"   ‚Ä¢ {channel.get('name', 'N/A')}: {status}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {channels_data}")
    
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç—ã
    posts_ok, posts_data = get_posts_status()
    if posts_ok:
        analysis = analyze_posts(posts_data)
        print(f"üìù –ü–û–°–¢–´:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ: {analysis['total']}")
        print(f"   ‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {analysis['published']}")
        print(f"   ‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {analysis['scheduled']}")
        
        if analysis['channels']:
            print("\nüìä –ü–æ –∫–∞–Ω–∞–ª–∞–º:")
            for channel_id, stats in analysis['channels'].items():
                print(f"   ‚Ä¢ {channel_id}: {stats['total']} –ø–æ—Å—Ç–æ–≤ ({stats['published']} –æ–ø—É–±–ª., {stats['scheduled']} –∑–∞–ø–ª.)")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–æ–≤: {posts_data}")
    
    print()
    print("="*60)
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main() 