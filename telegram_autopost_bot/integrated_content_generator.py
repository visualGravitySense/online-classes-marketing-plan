import random
import json
from datetime import datetime, timedelta
from typing import Optional, Dict, List
import requests

class ContentGenerator:
    def __init__(self):
        self.audience_matrix = {
            "–ù–æ–≤–∏—á–∫–∏ –≤ –¥–∏–∑–∞–π–Ω–µ": {
                "problems": [
                    "–ù–µ –∑–Ω–∞—é —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞",
                    "–ë–æ—é—Å—å —á—Ç–æ —É –º–µ–Ω—è –Ω–µ—Ç —Ç–∞–ª–∞–Ω—Ç–∞ –∫ –¥–∏–∑–∞–π–Ω—É",
                    "–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–∞–∫ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã",
                    "–ó–∞–ø—É—Ç–∞–ª—Å—è –≤ –æ–≥—Ä–æ–º–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤",
                    "–ù–µ –∑–Ω–∞—é –∫–∞–∫—É—é –Ω–∏—à—É –≤—ã–±—Ä–∞—Ç—å"
                ],
                "solutions": [
                    "–ü–æ—à–∞–≥–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –æ—Ç –æ—Å–Ω–æ–≤ –¥–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ç–µ—Ö–Ω–∏–∫",
                    "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
                    "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
                    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–µ–Ω—Ç–æ—Ä–∞ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ",
                    "–ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –∏ —Ä–µ—Å—É—Ä—Å—ã"
                ],
                "benefits": [
                    "–°–æ–∑–¥–∞—à—å –ø–µ—Ä–≤–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∑–∞ 3 –Ω–µ–¥–µ–ª–∏",
                    "–ù–∞—É—á–∏—à—å—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å –≤ Figma –∏ –¥—Ä—É–≥–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö",
                    "–ü–æ–π–º–µ—à—å –ø—Ä–∏–Ω—Ü–∏–ø—ã UX/UI –¥–∏–∑–∞–π–Ω–∞",
                    "–ü–æ–ª—É—á–∏—à—å –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è —Ä–µ–∑—é–º–µ",
                    "–ù–∞—á–Ω–µ—à—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –¥–∏–∑–∞–π–Ω–µ"
                ]
            },
            "Junior –¥–∏–∑–∞–π–Ω–µ—Ä—ã": {
                "problems": [
                    "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—É—é —Ä–∞–±–æ—Ç—É",
                    "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–∞–±–æ",
                    "–ù–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ —Ö–æ—Ç—è—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–∏",
                    "–ë–æ—é—Å—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π",
                    "–ù–µ –∑–Ω–∞—é –∫–∞–∫ —Ä–∞—Å—Ç–∏ –¥–∞–ª—å—à–µ"
                ],
                "solutions": [
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
                    "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º",
                    "–ò–∑—É—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Ä—ã–Ω–∫–∞",
                    "–†–∞–∑–±–æ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–µ–π—Å–æ–≤",
                    "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞"
                ],
                "benefits": [
                    "–ü–æ–ª—É—á–∏—à—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ",
                    "–£–≤–µ–ª–∏—á–∏—à—å –∑–∞—Ä–ø–ª–∞—Ç—É –≤ 2-3 —Ä–∞–∑–∞",
                    "–ù–∞—É—á–∏—à—å—Å—è –ø—Ä–µ–∑–µ–Ω—Ç–æ–≤–∞—Ç—å —Å–µ–±—è",
                    "–ü–æ–π–º–µ—à—å —Ç—Ä–µ–Ω–¥—ã –∏–Ω–¥—É—Å—Ç—Ä–∏–∏",
                    "–ü–æ—Å—Ç—Ä–æ–∏—à—å –∫–∞—Ä—å–µ—Ä–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"
                ]
            },
            "–§—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã": {
                "problems": [
                    "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤",
                    "–ù–∏–∑–∫–∏–µ —Ü–µ–Ω—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç—ã",
                    "–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥",
                    "–°–ª–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã",
                    "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è —Å –¥–µ—à–µ–≤—ã–º–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏"
                ],
                "solutions": [
                    "–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤",
                    "–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤",
                    "–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞",
                    "–†–∞–±–æ—Ç–∞ —Å –ø—Ä–µ–º–∏—É–º-–∫–ª–∏–µ–Ω—Ç–∞–º–∏",
                    "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
                ],
                "benefits": [
                    "–£–≤–µ–ª–∏—á–∏—à—å –¥–æ—Ö–æ–¥ –≤ 3-5 —Ä–∞–∑",
                    "–ù–∞–π–¥–µ—à—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
                    "–ù–∞—É—á–∏—à—å—Å—è –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Å–µ–±—è",
                    "–°–æ–∑–¥–∞—à—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –∑–∞–∫–∞–∑–æ–≤",
                    "–í—ã–π–¥–µ—à—å –Ω–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ä—ã–Ω–æ–∫"
                ]
            },
            "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏": {
                "problems": [
                    "–ù–µ –ø–æ–Ω–∏–º–∞—é –¥–∏–∑–∞–π–Ω-–ø—Ä–æ—Ü–µ—Å—Å—ã",
                    "–°–ª–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º–∏",
                    "–ù–µ —É–º–µ—é —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã",
                    "–•–æ—á—É –¥–µ–ª–∞—Ç—å full-stack –ø—Ä–æ–µ–∫—Ç—ã",
                    "–ù—É–∂–Ω—ã –Ω–∞–≤—ã–∫–∏ –¥–∏–∑–∞–π–Ω–∞ –¥–ª—è —Ä–æ—Å—Ç–∞"
                ],
                "solutions": [
                    "–ò–∑—É—á–µ–Ω–∏–µ UX/UI –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤",
                    "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤",
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤",
                    "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–∏–∑–∞–π–Ω–∞ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                    "Full-stack –ø–æ–¥—Ö–æ–¥ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º"
                ],
                "benefits": [
                    "–°—Ç–∞–Ω–µ—Ç–µ full-stack —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º",
                    "–£–≤–µ–ª–∏—á–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥",
                    "–°–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–¥ –∫–ª—é—á",
                    "–õ—É—á—à–µ –ø–æ–π–º–µ—Ç–µ –¥–∏–∑–∞–π–Ω-–ø—Ä–æ—Ü–µ—Å—Å—ã",
                    "–û—Ç–∫—Ä–æ–µ—Ç–µ –Ω–æ–≤—ã–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
                ]
            }
        }
        
        self.content_blocks = {
            "–ü—Ä–æ–±–ª–µ–º–∞": [
                "üî• {problem}\n\n–ó–Ω–∞–∫–æ–º–æ? –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ {audience} —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è —Å —ç—Ç–∏–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.",
                "üí° {problem}\n\n–ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ –≤–∞—Å - –≤—ã –Ω–µ –æ–¥–∏–Ω–æ–∫–∏!",
                "üéØ {problem}\n\n–≠—Ç–æ –≥–ª–∞–≤–Ω–∞—è –±–æ–ª—å {audience} –≤ 2024 –≥–æ–¥—É.",
                "‚ö° {problem}\n\n–ü–æ—Ä–∞ —Ä–µ—à–∏—Ç—å —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É —Ä–∞–∑ –∏ –Ω–∞–≤—Å–µ–≥–¥–∞!"
            ],
            "–†–µ—à–µ–Ω–∏–µ": [
                "‚úÖ –†–µ—à–µ–Ω–∏–µ: {solution}\n\n–ò–º–µ–Ω–Ω–æ —ç—Ç–æ–º—É –º—ã —É—á–∏–º –≤ –Ω–∞—à–µ–º –∫—É—Ä—Å–µ!",
                "üöÄ {solution}\n\n–≠—Ç–æ –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É –≤ –¥–∏–∑–∞–π–Ω–µ!",
                "üí™ {solution}\n\n–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç!",
                "üé® {solution}\n\n–ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∏—á—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!"
            ],
            "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫—É—Ä—Å–∞": [
                "üéì –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n‚Ä¢ {benefit1}\n‚Ä¢ {benefit2}\n‚Ä¢ {benefit3}\n\n–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
                "üìà –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –∫—É—Ä—Å–∞:\n‚úÖ {benefit1}\n‚úÖ {benefit2}\n‚úÖ {benefit3}",
                "üèÜ –ù–∞ –∫—É—Ä—Å–µ –≤—ã –Ω–∞—É—á–∏—Ç–µ—Å—å:\n‚Ä¢ {benefit1}\n‚Ä¢ {benefit2}\n‚Ä¢ {benefit3}",
                "üíé –ì–ª–∞–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\nüî• {benefit1}\nüî• {benefit2}\nüî• {benefit3}"
            ],
            "–ö–µ–π—Å": [
                "üìä –ö–µ–π—Å: {audience}\n\n–î–æ –∫—É—Ä—Å–∞: {problem}\n–ü–æ—Å–ª–µ –∫—É—Ä—Å–∞: {benefit1}\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {benefit2}",
                "üéØ –ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—Ö–∞:\n\n{audience} ‚Üí {problem} ‚Üí {solution} ‚Üí {benefit1}",
                "üìà –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{audience} –¥–æ–±–∏–ª–∏—Å—å {benefit1} –∑–∞ 3 –Ω–µ–¥–µ–ª–∏!",
                "üèÜ –£—Å–ø–µ—à–Ω—ã–π –∫–µ–π—Å:\n\n{audience} –∏–∑–º–µ–Ω–∏–ª–∏ –∫–∞—Ä—å–µ—Ä—É: {problem} ‚Üí {benefit1}"
            ],
            "–°–æ–≤–µ—Ç": [
                "üí° –°–æ–≤–µ—Ç –¥–ª—è {audience}:\n\n{solution}\n\n–≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ 90% —Å–ª—É—á–∞–µ–≤!",
                "üéØ –í–∞–∂–Ω—ã–π —Å–æ–≤–µ—Ç:\n\n{solution}\n\n–ü—Ä–∏–º–µ–Ω–∏—Ç–µ —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è!",
                "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Å–æ–≤–µ—Ç:\n\n{solution}\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–∞—Å—Ç–∞–≤–∏—Ç –∂–¥–∞—Ç—å!",
                "üîë –ö–ª—é—á–µ–≤–æ–π —Å–æ–≤–µ—Ç:\n\n{solution}\n\n–≠—Ç–æ –∏–∑–º–µ–Ω–∏—Ç –≤–∞—à –ø–æ–¥—Ö–æ–¥ –∫ –¥–∏–∑–∞–π–Ω—É!"
            ],
            "–ú–æ—Ç–∏–≤–∞—Ü–∏—è": [
                "üöÄ {audience}, –ø–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å!\n\n{solution}\n\n–í–∞—à —É—Å–ø–µ—Ö –∂–¥–µ—Ç –≤–∞—Å!",
                "üí™ –í—Ä–µ–º—è –ø–µ—Ä–µ–º–µ–Ω!\n\n{solution}\n\n–í—ã —Å–ø–æ—Å–æ–±–Ω—ã –Ω–∞ –±–æ–ª—å—à–µ–µ!",
                "üéØ –í–∞—à–∞ —Ü–µ–ª—å –¥–æ—Å—Ç–∏–∂–∏–º–∞!\n\n{solution}\n\n–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
                "üî• –ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞!\n\n{solution}\n\n–í–∞—à–µ –±—É–¥—É—â–µ–µ –≤ –≤–∞—à–∏—Ö —Ä—É–∫–∞—Ö!"
            ]
        }
        
        self.cta_variations = [
            "üëâ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ: @your_bot",
            "üéì –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å: @your_bot", 
            "üíé –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø: @your_bot",
            "üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: @your_bot",
            "üìö –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ: @your_bot"
        ]

    def generate_content(self, audience_group: str, content_type: str, custom_prompt: Optional[str] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ —Ç–∏–ø–∞"""
        
        if audience_group not in self.audience_matrix:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {audience_group}")
            
        if content_type not in self.content_blocks:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_type}")
        
        audience_data = self.audience_matrix[audience_group]
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        problem = random.choice(audience_data["problems"])
        solution = random.choice(audience_data["solutions"])
        benefits = random.sample(audience_data["benefits"], 3)
        
        # –í—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω
        template = random.choice(self.content_blocks[content_type])
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω
        content = template.format(
            audience=audience_group,
            problem=problem,
            solution=solution,
            benefit1=benefits[0],
            benefit2=benefits[1],
            benefit3=benefits[2]
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º CTA
        cta = random.choice(self.cta_variations)
        content += f"\n\n{cta}"
        
        return content

    def generate_batch(self, audience_group: str, count: int = 5) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞–∫–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
        content_types = list(self.content_blocks.keys())
        posts = []
        
        for _ in range(count):
            content_type = random.choice(content_types)
            post = self.generate_content(audience_group, content_type)
            posts.append(post)
            
        return posts

    def send_to_bot(self, content: str, channel_id: str, scheduled_time: Optional[datetime] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ API –±–æ—Ç–∞"""
        try:
            api_url = "http://localhost:8000/api/posts"
            
            post_data = {
                "content": content,
                "channel_id": channel_id,
                "scheduled_time": scheduled_time.isoformat() if scheduled_time else datetime.now().isoformat(),
                "media_path": None,
                "media_type": None
            }
            
            response = requests.post(api_url, json=post_data)
            return response.status_code == 200
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–æ—Ç: {e}")
            return False

    def schedule_posts(self, audience_group: str, channel_id: str, posts_count: int = 10, 
                      start_time: Optional[datetime] = None, interval_hours: int = 24) -> List[bool]:
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–µ—Ä–∏—é –ø–æ—Å—Ç–æ–≤"""
        if not start_time:
            start_time = datetime.now() + timedelta(hours=1)
            
        posts = self.generate_batch(audience_group, posts_count)
        results = []
        
        for i, post in enumerate(posts):
            scheduled_time = start_time + timedelta(hours=i * interval_hours)
            success = self.send_to_bot(post, channel_id, scheduled_time)
            results.append(success)
            
        return results

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    generator = ContentGenerator()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–∏–Ω –ø–æ—Å—Ç
    post = generator.generate_content("–ù–æ–≤–∏—á–∫–∏ –≤ –¥–∏–∑–∞–π–Ω–µ", "–ü—Ä–æ–±–ª–µ–º–∞")
    print("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç:")
    print(post)
    print("\n" + "="*50 + "\n")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç –ø–æ—Å—Ç–æ–≤
    posts = generator.generate_batch("Junior –¥–∏–∑–∞–π–Ω–µ—Ä—ã", 3)
    print("–ü–∞–∫–µ—Ç –ø–æ—Å—Ç–æ–≤:")
    for i, post in enumerate(posts, 1):
        print(f"–ü–æ—Å—Ç {i}:")
        print(post)
        print() 