#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π
"""

import requests
import time
from datetime import datetime, timedelta
from integrated_content_generator import ContentGenerator

def setup_auto_schedule():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    
    print("üìÖ –ù–ê–°–¢–†–û–ô–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –†–ê–°–ü–ò–°–ê–ù–ò–Ø")
    print("="*60)
    
    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π (–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú)
    schedule = {
        'monday': ['09:00', '14:00', '18:00'],
        'tuesday': ['10:00', '15:00', '19:00'],
        'wednesday': ['09:30', '14:30', '18:30'],
        'thursday': ['09:00', '14:00', '18:00'],
        'friday': ['10:00', '15:00', '19:00'],
        'saturday': ['11:00', '16:00'],
        'sunday': ['12:00', '17:00']
    }
    
    # –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    channels = [
        {'chat_id': '-1002091962525', 'name': 'digoGraphickDesign'},
        {'chat_id': '-1002123538949', 'name': 'digoUI'}
    ]
    
    # –ê—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    audiences = ["–ù–æ–≤–∏—á–∫–∏ –≤ –¥–∏–∑–∞–π–Ω–µ", "Junior –¥–∏–∑–∞–π–Ω–µ—Ä—ã", "–§—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã", "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏"]
    content_types = ["–ü—Ä–æ–±–ª–µ–º–∞", "–†–µ—à–µ–Ω–∏–µ", "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫—É—Ä—Å–∞", "–ö–µ–π—Å", "–°–æ–≤–µ—Ç", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è"]
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    generator = ContentGenerator()
    
    print(f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:")
    print(f"   ‚Ä¢ –î–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é: {len(schedule)}")
    print(f"   ‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤: {len(channels)}")
    print(f"   ‚Ä¢ –ê—É–¥–∏—Ç–æ—Ä–∏–π: {len(audiences)}")
    print(f"   ‚Ä¢ –¢–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(content_types)}")
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π
    total_posts = 0
    
    for day_name, times in schedule.items():
        print(f"\nüìÖ {day_name.upper()}:")
        
        for time_str in times:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            hour, minute = map(int, time_str.split(':'))
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            today = datetime.now()
            days_ahead = list(schedule.keys()).index(day_name)
            if days_ahead == 0:  # –°–µ–≥–æ–¥–Ω—è
                publish_date = today.replace(hour=hour, minute=minute, second=0, microsecond=0)
                if publish_date < today:
                    publish_date += timedelta(days=7)  # –ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
            else:
                publish_date = today + timedelta(days=days_ahead)
                publish_date = publish_date.replace(hour=hour, minute=minute, second=0, microsecond=0)
            
            print(f"   ‚è∞ {time_str} - {publish_date.strftime('%Y-%m-%d %H:%M')}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            for channel in channels:
                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                    audience = audiences[total_posts % len(audiences)]
                    content_type = content_types[total_posts % len(content_types)]
                    
                    content = generator.generate_content(audience, content_type)
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
                    post_data = {
                        "content": content,
                        "channel_id": channel['chat_id'],
                        "scheduled_time": publish_date.isoformat(),
                        "media_path": None,
                        "media_type": None
                    }
                    
                    response = requests.post("http://localhost:8000/api/posts", json=post_data, timeout=10)
                    
                    if response.status_code == 200:
                        result = response.json()
                        print(f"      ‚úÖ {channel['name']}: {audience} - {content_type}")
                        total_posts += 1
                    else:
                        print(f"      ‚ùå {channel['name']}: –æ—à–∏–±–∫–∞ {response.status_code}")
                        
                except Exception as e:
                    print(f"      ‚ùå {channel['name']}: {e}")
                
                time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    print(f"\nüéØ –ò–¢–û–ì–û –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–û: {total_posts} –ø–æ—Å—Ç–æ–≤")
    return total_posts

def setup_daily_content():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
    print("\nüìù –ù–ê–°–¢–†–û–ô–ö–ê –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê")
    print("="*50)
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ç–µ–º—ã
    daily_themes = {
        'monday': {
            'theme': '–ú–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é',
            'audience': '–ù–æ–≤–∏—á–∫–∏ –≤ –¥–∏–∑–∞–π–Ω–µ',
            'content_type': '–ú–æ—Ç–∏–≤–∞—Ü–∏—è'
        },
        'tuesday': {
            'theme': '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç',
            'audience': 'Junior –¥–∏–∑–∞–π–Ω–µ—Ä—ã',
            'content_type': '–°–æ–≤–µ—Ç'
        },
        'wednesday': {
            'theme': '–†–∞–∑–±–æ—Ä –∫–µ–π—Å–∞',
            'audience': '–§—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã',
            'content_type': '–ö–µ–π—Å'
        },
        'thursday': {
            'theme': '–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã',
            'audience': '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏',
            'content_type': '–†–µ—à–µ–Ω–∏–µ'
        },
        'friday': {
            'theme': '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ–±—É—á–µ–Ω–∏—è',
            'audience': '–ù–æ–≤–∏—á–∫–∏ –≤ –¥–∏–∑–∞–π–Ω–µ',
            'content_type': '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫—É—Ä—Å–∞'
        },
        'saturday': {
            'theme': '–í—ã—Ö–æ–¥–Ω–æ–π —Å–æ–≤–µ—Ç',
            'audience': 'Junior –¥–∏–∑–∞–π–Ω–µ—Ä—ã',
            'content_type': '–°–æ–≤–µ—Ç'
        },
        'sunday': {
            'theme': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–µ–¥–µ–ª–µ',
            'audience': '–§—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã',
            'content_type': '–ú–æ—Ç–∏–≤–∞—Ü–∏—è'
        }
    }
    
    channels = [
        {'chat_id': '-1002091962525', 'name': 'digoGraphickDesign'},
        {'chat_id': '-1002123538949', 'name': 'digoUI'}
    ]
    
    generator = ContentGenerator()
    
    for day, theme_info in daily_themes.items():
        print(f"\nüìÖ {day.upper()}: {theme_info['theme']}")
        
        # –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: 10:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        publish_time = datetime.now().replace(hour=10, minute=0, second=0, microsecond=0)
        days_ahead = list(daily_themes.keys()).index(day)
        publish_time += timedelta(days=days_ahead)
        
        for channel in channels:
            try:
                content = generator.generate_content(
                    theme_info['audience'], 
                    theme_info['content_type']
                )
                
                post_data = {
                    "content": content,
                    "channel_id": channel['chat_id'],
                    "scheduled_time": publish_time.isoformat(),
                    "media_path": None,
                    "media_type": None
                }
                
                response = requests.post("http://localhost:8000/api/posts", json=post_data, timeout=10)
                
                if response.status_code == 200:
                    print(f"   ‚úÖ {channel['name']}: {theme_info['audience']} - {theme_info['content_type']}")
                else:
                    print(f"   ‚ùå {channel['name']}: –æ—à–∏–±–∫–∞")
                    
            except Exception as e:
                print(f"   ‚ùå {channel['name']}: {e}")
            
            time.sleep(0.5)

def check_schedule_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    print("\nüìä –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –†–ê–°–ü–ò–°–ê–ù–ò–Ø")
    print("="*50)
    
    try:
        response = requests.get("http://localhost:8000/api/posts", timeout=5)
        if response.status_code == 200:
            posts = response.json()
            
            scheduled_posts = [post for post in posts if not post.get('published', False)]
            published_posts = [post for post in posts if post.get('published', False)]
            
            print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}")
            print(f"   ‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {len(published_posts)}")
            print(f"   ‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {len(scheduled_posts)}")
            
            if scheduled_posts:
                print(f"\n‚è≥ –ë–ª–∏–∂–∞–π—à–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                scheduled_posts.sort(key=lambda x: x.get('scheduled_time', ''))
                
                for i, post in enumerate(scheduled_posts[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    scheduled_time = post.get('scheduled_time', 'N/A')
                    channel_name = post.get('channel_name', 'N/A')
                    content_preview = post.get('content', '')[:50] + "..."
                    
                    print(f"   {i}. {scheduled_time} | {channel_name}")
                    print(f"      üìÑ {content_preview}")
                    print()
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

if __name__ == "__main__":
    print("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –†–ê–°–ü–ò–°–ê–ù–ò–Ø")
    print("="*60)
    
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        total_posts = setup_auto_schedule()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        setup_daily_content()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        check_schedule_status()
        
        print("\n" + "="*60)
        print("‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï –ù–ê–°–¢–†–û–ï–ù–û!")
        print("="*60)
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {total_posts + 14} –ø–æ—Å—Ç–æ–≤")
        print("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã")
        print("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: http://localhost:8000")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc() 