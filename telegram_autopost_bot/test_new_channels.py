#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã —Ç–æ–ª—å–∫–æ –≤ –¥–≤–∞ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞
"""

import requests
from datetime import datetime
import time

def send_test_posts_to_new_channels():
    channels = [
        {"id": "@designer_lfe", "title": "–ñ–∏–∑–Ω—å –î–∏–∑–∞–π–Ω–µ—Ä–∞"},
        {"id": "@digo_online_schools", "title": "Product Design & ML"}
    ]
    print("üöÄ –û–¢–ü–†–ê–í–ö–ê –¢–ï–°–¢–û–í–´–• –ü–û–°–¢–û–í –í –ù–û–í–´–ï –ö–ê–ù–ê–õ–´")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ –∫–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
    try:
        response = requests.get("http://localhost:8000/")
        if response.status_code == 200:
            print("‚úÖ API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            return
    except Exception as e:
        print(f"‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω: {e}")
        return
    
    for i, channel in enumerate(channels, 1):
        print(f"\nüì¢ [{i}/2] –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ {channel['id']} ({channel['title']})...")
        test_post = {
            "channel_id": channel["id"],
            "content": f"üß™ –¢–ï–°–¢–û–í–´–ô –ü–û–°–¢ –î–õ–Ø {channel['title']}\n\nüìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n\n‚úÖ –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ—Ç –ø–æ—Å—Ç - –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–º!\n\nüéØ –≠—Ç–æ —Ç–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
            "scheduled_time": datetime.now().isoformat()
        }
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å /api/posts
            response = requests.post(
                "http://localhost:8000/api/posts",
                json=test_post,
                headers={"Content-Type": "application/json"}
            )
            if response.status_code == 200:
                post_data = response.json()
                print(f"‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω (ID: {post_data['post_id']})")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
                test_request = {
                    "channel_id": channel["id"],
                    "content": f"üß™ –¢–ï–°–¢–û–í–´–ô –ü–û–°–¢ –î–õ–Ø {channel['title']}\n\nüìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n\n‚úÖ –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ—Ç –ø–æ—Å—Ç - –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–º!\n\nüéØ –≠—Ç–æ —Ç–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."
                }
                
                immediate_response = requests.post(
                    "http://localhost:8000/api/test_post",
                    json=test_request,
                    headers={"Content-Type": "application/json"}
                )
                
                if immediate_response.status_code == 200:
                    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {channel['id']}")
                else:
                    print(f"‚ö†Ô∏è –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {immediate_response.text}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {response.text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å {channel['id']}: {str(e)}")
        time.sleep(2)
    print("\n" + "=" * 60)
    print("üèÅ –¢–ï–°–¢–û–í–´–ï –ü–û–°–¢–´ –û–¢–ü–†–ê–í–õ–ï–ù–´ –í –ù–û–í–´–ï –ö–ê–ù–ê–õ–´")
    print("\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–Ω–∞–ª—ã:")
    for channel in channels:
        print(f"   ‚Ä¢ {channel['id']} ({channel['title']})")
    print("\nüìä –ï—Å–ª–∏ –ø–æ—Å—Ç—ã –Ω–µ –ø—Ä–∏—à–ª–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ –ª–æ–≥–∏ main.py!")

if __name__ == "__main__":
    send_test_posts_to_new_channels() 