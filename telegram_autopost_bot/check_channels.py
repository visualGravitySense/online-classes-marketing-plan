#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID –∫–∞–Ω–∞–ª–æ–≤
"""

import os
import sys
import asyncio
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import ALL_CHANNELS
from aiogram import Bot

load_dotenv()

async def check_channel_access(bot: Bot, channel_id: str, channel_name: str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        chat = await bot.get_chat(channel_id)
        return {
            'status': 'success',
            'chat_id': chat.id,
            'title': chat.title,
            'username': chat.username,
            'type': chat.type
        }
    except Exception as e:
        return {
            'status': 'error',
            'error': str(e),
            'chat_id': channel_id
        }

async def check_all_channels():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –ö –ö–ê–ù–ê–õ–ê–ú")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    bot = Bot(token=bot_token)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
    results = {}
    campaigns = {}
    
    for channel_key, channel_data in ALL_CHANNELS.items():
        channel_id = channel_data.get('chat_id')
        channel_name = channel_data.get('name', 'Unknown')
        campaign = channel_data.get('campaign', 'default')
        
        if not channel_id:
            print(f"‚ùå {channel_name}: ID –∫–∞–Ω–∞–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
            continue
        
        print(f"\nüì¢ –ü—Ä–æ–≤–µ—Ä–∫–∞: {channel_name}")
        print(f"   ID: {channel_id}")
        
        result = await check_channel_access(bot, channel_id, channel_name)
        results[channel_key] = result
        
        if result['status'] == 'success':
            print(f"   ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω: {result['title']}")
            print(f"   üìù –¢–∏–ø: {result['type']}")
            if result['username']:
                print(f"   üîó @{result['username']}")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º
            if campaign not in campaigns:
                campaigns[campaign] = {'success': [], 'error': []}
            campaigns[campaign]['success'].append(channel_name)
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            
            if campaign not in campaigns:
                campaigns[campaign] = {'success': [], 'error': []}
            campaigns[campaign]['error'].append(channel_name)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    total_success = 0
    total_errors = 0
    
    for campaign, stats in campaigns.items():
        print(f"\nüéØ –ö–ê–ú–ü–ê–ù–ò–Ø: {campaign.upper()}")
        print(f"   ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: {len(stats['success'])}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {len(stats['error'])}")
        
        if stats['success']:
            print("   üì¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:")
            for channel in stats['success']:
                print(f"      ‚Ä¢ {channel}")
        
        if stats['error']:
            print("   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:")
            for channel in stats['error']:
                print(f"      ‚Ä¢ {channel}")
        
        total_success += len(stats['success'])
        total_errors += len(stats['error'])
    
    print(f"\nüéâ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: {total_success}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {total_errors}")
    
    if total_errors > 0:
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ID –∫–∞–Ω–∞–ª–æ–≤ —É–∫–∞–∑–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("   3. –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username")
        print("   4. –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞
    await bot.session.close()
    
    return results

def generate_working_config(results):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüîß –ì–ï–ù–ï–†–ê–¶–ò–Ø –†–ê–ë–û–ß–ï–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("=" * 60)
    
    working_channels = {}
    
    for channel_key, result in results.items():
        if result['status'] == 'success':
            original_data = ALL_CHANNELS[channel_key]
            working_channels[channel_key] = {
                'chat_id': str(result['chat_id']),
                'name': result['title'],
                'active': True,
                'campaign': original_data.get('campaign', 'default'),
                'target_audience': original_data.get('target_audience', 'All'),
                'description': original_data.get('description', ''),
                'username': result.get('username', ''),
                'type': result['type']
            }
    
    if working_channels:
        print("‚úÖ –†–∞–±–æ—á–∏–µ –∫–∞–Ω–∞–ª—ã:")
        for key, data in working_channels.items():
            print(f"   ‚Ä¢ {data['name']} ({data['chat_id']})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        import json
        with open('working_channels.json', 'w', encoding='utf-8') as f:
            json.dump(working_channels, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ –†–∞–±–æ—á–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ working_channels.json")
    else:
        print("‚ùå –ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö –∫–∞–Ω–∞–ª–æ–≤")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    results = await check_all_channels()
    generate_working_config(results)

if __name__ == "__main__":
    asyncio.run(main()) 