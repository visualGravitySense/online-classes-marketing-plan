#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import os
from datetime import datetime, timedelta
from database import Database
from integrated_content_generator import ContentGenerator

def test_database():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_path = 'data/test_posts.db'
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–µ—Å—Ç–æ–≤—É—é –ë–î –µ—Å–ª–∏ –µ—Å—Ç—å
    if os.path.exists(db_path):
        os.remove(db_path)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ—Ç
    os.makedirs('data', exist_ok=True)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS channels (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                chat_id TEXT NOT NULL UNIQUE,
                active BOOLEAN DEFAULT TRUE
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS posts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                content TEXT NOT NULL,
                channel_id TEXT NOT NULL,
                scheduled_time DATETIME NOT NULL,
                published BOOLEAN DEFAULT FALSE,
                published_time DATETIME,
                error_message TEXT,
                media_path TEXT,
                media_type TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        cursor.execute('''
            INSERT INTO channels (name, chat_id, active) VALUES 
            ('Test Channel', '-1001234567890', TRUE),
            ('Main Channel', '-1009876543210', TRUE)
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã
        test_time = datetime.now() + timedelta(hours=1)
        cursor.execute('''
            INSERT INTO posts (content, channel_id, scheduled_time) VALUES 
            ('–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç 1', '-1001234567890', ?),
            ('–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç 2', '-1009876543210', ?)
        ''', (test_time, test_time + timedelta(hours=2)))
        
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor.execute('SELECT COUNT(*) FROM channels')
        channels_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM posts')
        posts_count = cursor.fetchone()[0]
        
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"   ‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤: {channels_count}")
        print(f"   ‚Ä¢ –ü–æ—Å—Ç–æ–≤: {posts_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã
        cursor.execute('SELECT * FROM channels')
        channels = cursor.fetchall()
        print(f"\nüì¢ –ö–∞–Ω–∞–ª—ã –≤ –±–∞–∑–µ:")
        for channel in channels:
            print(f"   ‚Ä¢ {channel[1]} (ID: {channel[2]}) - {'–ê–∫—Ç–∏–≤–µ–Ω' if channel[3] else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã
        cursor.execute('SELECT * FROM posts')
        posts = cursor.fetchall()
        print(f"\nüìù –ü–æ—Å—Ç—ã –≤ –±–∞–∑–µ:")
        for post in posts:
            print(f"   ‚Ä¢ ID: {post[0]} | –ö–æ–Ω—Ç–µ–Ω—Ç: {post[1][:50]}... | –í—Ä–µ–º—è: {post[3]}")
        
        conn.close()
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
        os.remove(db_path)
        print(f"\nüßπ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_database_class():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å Database"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ Database...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Database
        db = Database('data/test_db.db')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        db.add_channel('Test Channel', '-1001234567890')
        print("‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
        channels = db.get_active_channels()
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
        test_time = datetime.now() + timedelta(hours=1)
        post_id = db.add_post(
            content='–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ Database –∫–ª–∞—Å—Å',
            channel_id='-1001234567890',
            scheduled_time=test_time
        )
        print(f"‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Å ID: {post_id}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
        posts = db.get_pending_posts()
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
        if os.path.exists('data/test_db.db'):
            os.remove('data/test_db.db')
        
        print("‚úÖ –ö–ª–∞—Å—Å Database —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∞—Å—Å–∞ Database: {e}")
        return False

def test_content_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        generator = ContentGenerator()
        db = Database('data/test_integration.db')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
        db.add_channel('Integration Test Channel', '-1001234567890')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        content = generator.generate_content('–ù–æ–≤–∏—á–∫–∏ –≤ –¥–∏–∑–∞–π–Ω–µ', '–°–æ–≤–µ—Ç')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        test_time = datetime.now() + timedelta(hours=1)
        post_id = db.add_post(
            content=content,
            channel_id='-1001234567890',
            scheduled_time=test_time
        )
        
        print(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î —Å ID: {post_id}")
        print(f"üìù –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {content[:100]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Å—Ç –≤ –±–∞–∑–µ
        posts = db.get_pending_posts()
        print(f"‚úÖ –ü–æ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ: {len(posts)}")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
        if os.path.exists('data/test_integration.db'):
            os.remove('data/test_integration.db')
        
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_scheduler():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    print("\n‚è∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    
    try:
        from scheduler import PostScheduler
        from aiogram import Bot
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        class MockBot:
            async def send_message(self, chat_id, text):
                print(f"ü§ñ –ú–æ–∫-–±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {chat_id}: {text[:50]}...")
                return True
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        db = Database('data/test_scheduler.db')
        db.add_channel('Scheduler Test Channel', '-1001234567890')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
        test_time = datetime.now() + timedelta(seconds=5)  # –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        db.add_post(
            content='–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞',
            channel_id='-1001234567890',
            scheduled_time=test_time
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler = PostScheduler(db, MockBot(), {})
        
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–æ–∑–¥–∞–Ω")
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
        import asyncio
        async def test_scheduler_run():
            await scheduler.start()
            await asyncio.sleep(10)
            await scheduler.stop()
        
        asyncio.run(test_scheduler_run())
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
        if os.path.exists('data/test_scheduler.db'):
            os.remove('data/test_scheduler.db')
        
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        return False

if __name__ == "__main__":
    print("üîß –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API –ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("="*60)
    
    results = []
    
    try:
        results.append(test_database())
        results.append(test_database_class())
        results.append(test_content_integration())
        results.append(test_scheduler())
        
        print("\n" + "="*60)
        success_count = sum(results)
        total_count = len(results)
        
        if success_count == total_count:
            print(f"‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! ({success_count}/{total_count})")
        else:
            print(f"‚ö†Ô∏è –ü–†–û–ô–î–ï–ù–û –¢–ï–°–¢–û–í: {success_count}/{total_count}")
        
        print("="*60)
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc() 