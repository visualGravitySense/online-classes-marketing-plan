#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è/–∫–∞–º–ø–∞–Ω–∏–∏:
- UXUI –¥–∏–∑–∞–π–Ω (default)
- –¶–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å–∞ (digitalizacija)
- –õ–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
"""

import logging
import os
import sys
import json
import time
import threading
from datetime import datetime
from typing import Dict, List, Optional
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ config.py
from config import BOT_TOKEN, ADMIN_ID, ALL_CHANNELS, POSTING_SCHEDULE, POST_TEMPLATES
from database import Database
from scheduler import PostScheduler
from integrated_content_generator import ContentGenerator

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class CampaignStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏—è–º–∏"""
    choosing_campaign = State()
    choosing_action = State()
    choosing_channel = State()
    entering_content = State()
    entering_media = State()
    entering_time = State()

class UniversalBot:
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN)
        self.dp = Dispatcher()
        self.db = Database('data/posts.db')
        self.content_generator = ContentGenerator()
        
        # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ü–ï–†–ï–î –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞–º–∏)
        self.components_status = {
            'schedulers': {},
            'content_generator': False
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
        self.schedulers = {}
        self.initialize_schedulers()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.register_handlers()
    
    def initialize_schedulers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞–º–ø–∞–Ω–∏–∏"""
        campaigns = self.get_available_campaigns()
        
        for campaign in campaigns:
            campaign_channels = self.get_campaign_channels(campaign)
            if campaign_channels:
                scheduler = PostScheduler(self.db, self.bot, campaign_channels)
                self.schedulers[campaign] = scheduler
                self.components_status['schedulers'][campaign] = False
    
    def get_available_campaigns(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π"""
        campaigns = set()
        
        for channel_id, channel_data in ALL_CHANNELS.items():
            campaign = channel_data.get('campaign', 'default')
            campaigns.add(campaign)
        
        return list(campaigns)
    
    def get_campaign_channels(self, campaign: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏"""
        campaign_channels = {}
        
        for channel_id, channel_data in ALL_CHANNELS.items():
            channel_campaign = channel_data.get('campaign', 'default')
            if channel_campaign == campaign:
                campaign_channels[channel_id] = channel_data
        
        return campaign_channels
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self.start, Command(commands=["start"]))
        self.dp.message.register(self.help_command, Command(commands=["help"]))
        self.dp.message.register(self.campaigns, Command(commands=["campaigns"]))
        self.dp.message.register(self.status, Command(commands=["status"]))
        self.dp.message.register(self.generate_content, Command(commands=["generate"]))
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏—è–º–∏
        self.dp.message.register(self.manage_campaign, Command(commands=["manage"]))
        self.dp.callback_query.register(self.handle_campaign_callback)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏
        self.dp.message.register(self.add_post, Command(commands=["add_post"]))
        self.dp.message.register(self.schedule_post, Command(commands=["schedule"]))
        self.dp.message.register(self.show_schedule, Command(commands=["schedule_list"]))
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        self.dp.message.register(self.show_stats, Command(commands=["stats"]))
        self.dp.message.register(self.show_analytics, Command(commands=["analytics"]))
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π
        self.dp.message.register(self.start_all, Command(commands=["start_all"]))
        self.dp.message.register(self.stop_all, Command(commands=["stop_all"]))
        self.dp.message.register(self.restart_all, Command(commands=["restart_all"]))
    
    async def start(self, message: types.Message):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        user = message.from_user
        if user.id != ADMIN_ID:
            await message.reply("‚ùå –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        welcome_text = f"""
üéØ –ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–Ø —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.

üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/campaigns - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏—è–º–∏
/manage - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–µ–π
/add_post - –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç
/generate - –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/help - –ü–æ–º–æ—â—å

üöÄ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /campaigns
        """
        
        await message.reply(welcome_text)
    
    async def help_command(self, message: types.Message):
        """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        if message.from_user.id != ADMIN_ID:
            return

        help_text = """
üìö –°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú

üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏—è–º–∏:
/campaigns - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∫–∞–º–ø–∞–Ω–∏–π
/manage - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–µ–π

üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º:
/add_post - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç
/schedule - –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç
/schedule_list - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
/generate - –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç

üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:
/stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/analytics - –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π:
/start_all - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
/stop_all - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
/restart_all - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
/status - –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help
        """
        await message.reply(help_text)
    
    async def campaigns(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏"""
        if message.from_user.id != ADMIN_ID:
            return

        campaigns = self.get_available_campaigns()
        
        campaigns_text = "üéØ –î–û–°–¢–£–ü–ù–´–ï –ö–ê–ú–ü–ê–ù–ò–ò\n\n"
        
        for campaign in campaigns:
            channels = self.get_campaign_channels(campaign)
            active_channels = [ch for ch in channels.values() if ch.get('active', True)]
            
            status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if self.components_status['schedulers'].get(campaign, False) else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
            
            campaigns_text += f"üìå {campaign.upper()}\n"
            campaigns_text += f"   –°—Ç–∞—Ç—É—Å: {status}\n"
            campaigns_text += f"   –ö–∞–Ω–∞–ª–æ–≤: {len(active_channels)}/{len(channels)}\n"
            campaigns_text += f"   –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {len(POSTING_SCHEDULE.get(campaign, POSTING_SCHEDULE['default']))} –¥–Ω–µ–π\n"
            campaigns_text += "   " + "‚îÄ" * 30 + "\n"
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="manage_campaigns")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="campaign_stats")],
            [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="start_all_campaigns")]
        ])
        
        await message.reply(campaigns_text, reply_markup=keyboard)
    
    async def manage_campaign(self, message: types.Message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–µ–π"""
        if message.from_user.id != ADMIN_ID:
            return

        campaigns = self.get_available_campaigns()
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=campaign.upper(), callback_data=f"manage_{campaign}")]
            for campaign in campaigns
        ])
        
        await message.reply("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    
    async def handle_campaign_callback(self, callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if callback_query.from_user.id != ADMIN_ID:
            await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        data = callback_query.data
        
        if data == "manage_campaigns":
            await self.manage_campaign(callback_query.message)
        
        elif data == "campaign_stats":
            await self.show_campaign_stats(callback_query.message)
        
        elif data == "start_all_campaigns":
            await self.start_all_campaigns(callback_query.message)
        
        elif data.startswith("manage_"):
            campaign = data.replace("manage_", "")
            await self.show_campaign_management(callback_query.message, campaign)
        
        elif data.startswith("campaign_"):
            parts = data.split("_")
            if len(parts) >= 3:
                campaign = parts[1]
                action = "_".join(parts[2:])
                await self.handle_campaign_action(callback_query.message, campaign, action)
        
        await callback_query.answer()
    
    async def show_campaign_management(self, message: types.Message, campaign: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–µ–π"""
        channels = self.get_campaign_channels(campaign)
        active_channels = [ch for ch in channels.values() if ch.get('active', True)]
        
        status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if self.components_status['schedulers'].get(campaign, False) else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        
        campaign_info = f"""
üéØ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ú–ü–ê–ù–ò–ï–ô: {campaign.upper()}

üìä –°—Ç–∞—Ç—É—Å: {status}
üì¢ –ö–∞–Ω–∞–ª–æ–≤: {len(active_channels)}/{len(channels)}
üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {len(POSTING_SCHEDULE.get(campaign, POSTING_SCHEDULE['default']))} –¥–Ω–µ–π
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"campaign_{campaign}_start"),
                InlineKeyboardButton(text="‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"campaign_{campaign}_stop")
            ],
            [
                InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç", callback_data=f"campaign_{campaign}_add_post"),
                InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"campaign_{campaign}_schedule")
            ],
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"campaign_{campaign}_stats"),
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f"campaign_{campaign}_settings")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_campaigns")]
        ])
        
        await message.edit_text(campaign_info, reply_markup=keyboard)
    
    async def handle_campaign_action(self, message: types.Message, campaign: str, action: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–∞–º–ø–∞–Ω–∏–µ–π"""
        if action == "start":
            await self.start_campaign(message, campaign)
        elif action == "stop":
            await self.stop_campaign(message, campaign)
        elif action == "add_post":
            await self.add_post_to_campaign(message, campaign)
        elif action == "schedule":
            await self.show_campaign_schedule(message, campaign)
        elif action == "stats":
            await self.show_campaign_stats(message, campaign)
        elif action == "settings":
            await self.show_campaign_settings(message, campaign)
    
    async def start_campaign(self, message: types.Message, campaign: str):
        """–ó–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏"""
        if campaign in self.schedulers:
            try:
                self.schedulers[campaign].start()
                self.components_status['schedulers'][campaign] = True
                await message.reply(f"‚úÖ –ö–∞–º–ø–∞–Ω–∏—è {campaign.upper()} –∑–∞–ø—É—â–µ–Ω–∞")
            except Exception as e:
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign}: {e}")
        else:
            await message.reply(f"‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ {campaign} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    async def stop_campaign(self, message: types.Message, campaign: str):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏"""
        if campaign in self.schedulers:
            try:
                self.schedulers[campaign].stop()
                self.components_status['schedulers'][campaign] = False
                await message.reply(f"‚è∏Ô∏è –ö–∞–º–ø–∞–Ω–∏—è {campaign.upper()} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            except Exception as e:
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign}: {e}")
        else:
            await message.reply(f"‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ {campaign} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    async def add_post_to_campaign(self, message: types.Message, campaign: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –∫–∞–º–ø–∞–Ω–∏—é"""
        channels = self.get_campaign_channels(campaign)
        active_channels = [ch for ch in channels.values() if ch.get('active', True)]
        
        if not active_channels:
            await message.reply(f"‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign}")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=ch['name'], callback_data=f"channel_{ch['chat_id']}")]
            for ch in active_channels
        ])
        
        await message.reply(f"üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ—Å—Ç–∞ –≤ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign.upper()}:", reply_markup=keyboard)
    
    async def add_post(self, message: types.Message):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç"""
        if message.from_user.id != ADMIN_ID:
            return

        campaigns = self.get_available_campaigns()
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–º–ø–∞–Ω–∏–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=campaign.upper(), callback_data=f"add_post_{campaign}")]
            for campaign in campaigns
        ])
        
        await message.reply("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞:", reply_markup=keyboard)
    
    async def schedule_post(self, message: types.Message):
        """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç"""
        if message.from_user.id != ADMIN_ID:
            return

        campaigns = self.get_available_campaigns()
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–º–ø–∞–Ω–∏–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=campaign.upper(), callback_data=f"schedule_{campaign}")]
            for campaign in campaigns
        ])
        
        await message.reply("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞:", reply_markup=keyboard)
    
    async def show_schedule(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤"""
        if message.from_user.id != ADMIN_ID:
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = self.db.get_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT p.*, c.name as channel_name 
            FROM posts p 
            LEFT JOIN channels c ON p.channel_id = c.chat_id
            WHERE p.published = FALSE 
            ORDER BY p.scheduled_time ASC
            LIMIT 20
        ''')
        
        posts = cursor.fetchall()
        conn.close()
        
        if not posts:
            await message.reply("üìÖ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
            return
        
        schedule_text = "üìÖ –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–ï –ü–û–°–¢–´\n\n"
        
        for post in posts:
            scheduled_time = datetime.fromisoformat(post['scheduled_time'])
            schedule_text += f"üïê {scheduled_time.strftime('%d.%m.%Y %H:%M')}\n"
            schedule_text += f"üì¢ {post['channel_name'] or post['channel_id']}\n"
            schedule_text += f"üìù {post['content'][:100]}...\n"
            schedule_text += "‚îÄ" * 30 + "\n"
        
        await message.reply(schedule_text)
    
    async def show_analytics(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
        if message.from_user.id != ADMIN_ID:
            return

        campaigns = self.get_available_campaigns()
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–º–ø–∞–Ω–∏–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=campaign.upper(), callback_data=f"analytics_{campaign}")]
            for campaign in campaigns
        ])
        
        await message.reply("üìä –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:", reply_markup=keyboard)
    
    async def show_campaign_stats(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–º–ø–∞–Ω–∏–π"""
        if message.from_user.id != ADMIN_ID:
            return

        campaigns = self.get_available_campaigns()
        
        stats_text = "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ú–ü–ê–ù–ò–ô\n\n"
        
        for campaign in campaigns:
            channels = self.get_campaign_channels(campaign)
            active_channels = [ch for ch in channels.values() if ch.get('active', True)]
            
            status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if self.components_status['schedulers'].get(campaign, False) else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
            
            stats_text += f"üìå {campaign.upper()}\n"
            stats_text += f"   –°—Ç–∞—Ç—É—Å: {status}\n"
            stats_text += f"   –ö–∞–Ω–∞–ª–æ–≤: {len(active_channels)}/{len(channels)}\n"
            stats_text += "   " + "‚îÄ" * 30 + "\n"
        
        await message.reply(stats_text)
    
    async def show_campaign_schedule(self, message: types.Message, campaign: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏"""
        channels = self.get_campaign_channels(campaign)
        
        schedule_text = f"üìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï –ö–ê–ú–ü–ê–ù–ò–ò: {campaign.upper()}\n\n"
        
        for channel_id, channel_data in channels.items():
            schedule_text += f"üì¢ {channel_data['name']}\n"
            schedule_text += f"   ID: {channel_id}\n"
            schedule_text += f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if channel_data.get('active', True) else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
            schedule_text += "   " + "‚îÄ" * 20 + "\n"
        
        await message.reply(schedule_text)
    
    async def generate_content(self, message: types.Message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        if message.from_user.id != ADMIN_ID:
            return

        campaigns = self.get_available_campaigns()
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–º–ø–∞–Ω–∏–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=campaign.upper(), callback_data=f"generate_{campaign}")]
            for campaign in campaigns
        ])
        
        await message.reply("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", reply_markup=keyboard)
    
    async def show_stats(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if message.from_user.id != ADMIN_ID:
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = self.db.get_connection()
        cursor = conn.cursor()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*) FROM posts")
        total_posts = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM posts WHERE published = TRUE")
        published_posts = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM posts WHERE error_message IS NOT NULL")
        failed_posts = cursor.fetchone()[0]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º
        campaigns_stats = {}
        campaigns = self.get_available_campaigns()
        
        for campaign in campaigns:
            campaign_channels = self.get_campaign_channels(campaign)
            channel_ids = [ch['chat_id'] for ch in campaign_channels.values()]
            
            if channel_ids:
                placeholders = ','.join(['?' for _ in channel_ids])
                cursor.execute(f"SELECT COUNT(*) FROM posts WHERE channel_id IN ({placeholders})", channel_ids)
                campaign_posts = cursor.fetchone()[0]
                
                cursor.execute(f"SELECT COUNT(*) FROM posts WHERE channel_id IN ({placeholders}) AND published = TRUE", channel_ids)
                campaign_published = cursor.fetchone()[0]
                
                campaigns_stats[campaign] = {
                    'total': campaign_posts,
                    'published': campaign_published,
                    'success_rate': (campaign_published / campaign_posts * 100) if campaign_posts > 0 else 0
                }
        
        conn.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        stats_text = "üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n"
        stats_text += f"üìù –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_posts}\n"
        stats_text += f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_posts}\n"
        stats_text += f"‚ùå –û—à–∏–±–æ–∫: {failed_posts}\n"
        stats_text += f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(published_posts/total_posts*100 if total_posts > 0 else 0):.1f}%\n\n"
        
        stats_text += "üéØ –ü–û –ö–ê–ú–ü–ê–ù–ò–Ø–ú:\n"
        for campaign, stats in campaigns_stats.items():
            status = "üü¢" if self.components_status['schedulers'].get(campaign, False) else "üî¥"
            stats_text += f"{status} {campaign.upper()}: {stats['published']}/{stats['total']} ({stats['success_rate']:.1f}%)\n"
        
        await message.reply(stats_text)
    
    async def status(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        if message.from_user.id != ADMIN_ID:
            return

        status_text = "‚öôÔ∏è –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´\n\n"
        
        # –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
        status_text += "üìÖ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ò:\n"
        for campaign, scheduler in self.schedulers.items():
            status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if self.components_status['schedulers'].get(campaign, False) else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            status_text += f"   {campaign.upper()}: {status}\n"
        
        # –°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if self.components_status['content_generator'] else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        status_text += f"\nü§ñ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_status}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="start_all_campaigns"),
                InlineKeyboardButton(text="‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ", callback_data="stop_all_campaigns")
            ],
            [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="restart_all_campaigns")]
        ])
        
        await message.reply(status_text, reply_markup=keyboard)
    
    async def start_all(self, message: types.Message):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        if message.from_user.id != ADMIN_ID:
            return

        await self.start_all_campaigns(message)
    
    async def start_all_campaigns(self, message: types.Message):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–∞–º–ø–∞–Ω–∏–π"""
        started_count = 0
        total_count = len(self.schedulers)
        
        for campaign, scheduler in self.schedulers.items():
            try:
                scheduler.start()
                self.components_status['schedulers'][campaign] = True
                started_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign}: {e}")
        
        await message.reply(f"üöÄ –ó–∞–ø—É—â–µ–Ω–æ {started_count}/{total_count} –∫–∞–º–ø–∞–Ω–∏–π")
    
    async def stop_all(self, message: types.Message):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        if message.from_user.id != ADMIN_ID:
            return

        stopped_count = 0
        total_count = len(self.schedulers)
        
        for campaign, scheduler in self.schedulers.items():
            try:
                scheduler.stop()
                self.components_status['schedulers'][campaign] = False
                stopped_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign}: {e}")
        
        await message.reply(f"‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {stopped_count}/{total_count} –∫–∞–º–ø–∞–Ω–∏–π")
    
    async def restart_all(self, message: types.Message):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        if message.from_user.id != ADMIN_ID:
            return

        await self.stop_all(message)
        await asyncio.sleep(2)
        await self.start_all(message)
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏
        for campaign, scheduler in self.schedulers.items():
            try:
                scheduler.start()
                self.components_status['schedulers'][campaign] = True
                logger.info(f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign} –∑–∞–ø—É—â–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ {campaign}: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await self.dp.start_polling(self.bot)

if __name__ == '__main__':
    bot = UniversalBot()
    asyncio.run(bot.run()) 