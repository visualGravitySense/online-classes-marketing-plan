#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
"""

import requests
import time
from datetime import datetime, timedelta
from integrated_content_generator import ContentGenerator

def add_new_channels():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –≤ —Å–∏—Å—Ç–µ–º—É"""
    
    print("üì¢ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–´–• –ö–ê–ù–ê–õ–û–í")
    print("="*50)
    
    # –ù–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
    new_channels = [
        {
            'name': 'digo_online_schools',
            'chat_id': '-1002316535443',
            'description': 'Product Design & ML - –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —É—Å–ª—É–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è'
        },
        {
            'name': 'designer_lfe',
            'chat_id': '-1001903756368',
            'description': '–ñ–∏–∑–Ω—å –î–∏–∑–∞–π–Ω–µ—Ä–∞'
        }
    ]
    
    for channel in new_channels:
        print(f"\nüì¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: {channel['name']}")
        print(f"   ID: {channel['chat_id']}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {channel['description']}")
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ API
            channel_data = {
                "name": channel['name'],
                "chat_id": channel['chat_id'],
                "active": True
            }
            
            response = requests.post("http://localhost:8000/api/channels", json=channel_data, timeout=10)
            
            if response.status_code == 200:
                print(f"   ‚úÖ –ö–∞–Ω–∞–ª {channel['name']} –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {response.status_code}")
                print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print("-" * 30)

def create_posts_for_new_channels():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    
    print("\nüìù –°–û–ó–î–ê–ù–ò–ï –ü–û–°–¢–û–í –î–õ–Ø –ù–û–í–´–• –ö–ê–ù–ê–õ–û–í")
    print("="*50)
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    channel_content = {
        'digo_online_schools': {
            'chat_id': '-1002316535443',
            'name': 'digo_online_schools',
            'posts': [
                {
                    'content': """ü§ñ Product Design & ML

üí° –ö–∞–∫ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–µ–Ω—è–µ—Ç –¥–∏–∑–∞–π–Ω –ø—Ä–æ–¥—É–∫—Ç–æ–≤

–°–µ–≥–æ–¥–Ω—è ML-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–º–æ–≥–∞—é—Ç –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

üîß –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å ML
‚Ä¢ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: +40% –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üéØ –ì–æ—Ç–æ–≤—ã –∏–∑—É—á–∞—Ç—å ML –¥–ª—è –¥–∏–∑–∞–π–Ω–∞?

#ProductDesign #MachineLearning #UXDesign #ML""",
                    'scheduled_time': datetime.now() + timedelta(hours=1)
                },
                {
                    'content': """üìä –ö–µ–π—Å: ML –≤ E-commerce

üéØ –ó–∞–¥–∞—á–∞: –£–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ 30% —Å –ø–æ–º–æ—â—å—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏

‚ùå –ü—Ä–æ–±–ª–µ–º—ã:
- –°—Ç–∞—Ç–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è
- –í—ã—Å–æ–∫–∏–π –æ—Ç—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

‚úÖ ML-—Ä–µ—à–µ–Ω–∏–µ:
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
- –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞

üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: +45% –ø—Ä–æ–¥–∞–∂, -25% –æ—Ç—Ç–æ–∫–∞

üí° ML + UX = –°—É–ø–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

#ML #Ecommerce #UXDesign #–ö–µ–π—Å""",
                    'scheduled_time': datetime.now() + timedelta(hours=3)
                }
            ]
        },
        'designer_lfe': {
            'chat_id': '-1001903756368',
            'name': 'designer_lfe',
            'posts': [
                {
                    'content': """üé® –ñ–∏–∑–Ω—å –î–∏–∑–∞–π–Ω–µ—Ä–∞

üíº –ö–∞–∫ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —É—Å–ø–µ—à–Ω—É—é –∫–∞—Ä—å–µ—Ä—É –≤ –¥–∏–∑–∞–π–Ω–µ

–î–∏–∑–∞–π–Ω - —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ –∫—Ä–∞—Å–æ—Ç—É, –Ω–æ –∏ –ø—Ä–æ —Ä–µ—à–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á. –£—Å–ø–µ—à–Ω—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä –ø–æ–Ω–∏–º–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –±–∏–∑–Ω–µ—Å–∞.

üöÄ –ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏:
‚Ä¢ UX/UI –¥–∏–∑–∞–π–Ω
‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
‚Ä¢ –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è —Å –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏
‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ

üí° –°–æ–≤–µ—Ç: –ò–∑—É—á–∞–π—Ç–µ –Ω–µ —Ç–æ–ª—å–∫–æ –¥–∏–∑–∞–π–Ω, –Ω–æ –∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã

üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: –°—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã

#–î–∏–∑–∞–π–Ω #–ö–∞—Ä—å–µ—Ä–∞ #UXUI #–ñ–∏–∑–Ω—å–î–∏–∑–∞–π–Ω–µ—Ä–∞""",
                    'scheduled_time': datetime.now() + timedelta(hours=2)
                },
                {
                    'content': """üî• –î–∏–∑–∞–π–Ω-–º—ã—à–ª–µ–Ω–∏–µ –≤ –∂–∏–∑–Ω–∏

üß† –ö–∞–∫ –ø—Ä–∏–º–µ–Ω—è—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã –¥–∏–∑–∞–π–Ω–∞ –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö

–î–∏–∑–∞–π–Ω-–º—ã—à–ª–µ–Ω–∏–µ - —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã. –≠—Ç–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã –ø–æ–º–æ–≥–∞—é—Ç —Ä–µ—à–∞—Ç—å –ª—é–±—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:

1Ô∏è‚É£ –≠–º–ø–∞—Ç–∏—è - –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π
2Ô∏è‚É£ –§–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞ - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π - –ø–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏–π
4Ô∏è‚É£ –ü—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –≤–∞–ª–∏–¥–∞—Ü–∏—è

üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –ª—é–±–æ–π –∑–∞–¥–∞—á–µ!

üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ë–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º

#–î–∏–∑–∞–π–Ω–ú—ã—à–ª–µ–Ω–∏–µ #–ü—Ä–æ–±–ª–µ–º—ã #–†–µ—à–µ–Ω–∏–µ #UX""",
                    'scheduled_time': datetime.now() + timedelta(hours=4)
                }
            ]
        }
    }
    
    total_posts = 0
    
    for channel_key, channel_info in channel_content.items():
        print(f"\nüì¢ –ö–∞–Ω–∞–ª: {channel_info['name']}")
        
        for i, post_info in enumerate(channel_info['posts'], 1):
            print(f"   üìù –ü–æ—Å—Ç #{i}: {post_info['scheduled_time'].strftime('%H:%M')}")
            
            try:
                post_data = {
                    "content": post_info['content'],
                    "channel_id": channel_info['chat_id'],
                    "scheduled_time": post_info['scheduled_time'].isoformat(),
                    "media_path": None,
                    "media_type": None
                }
                
                response = requests.post("http://localhost:8000/api/posts", json=post_data, timeout=10)
                
                if response.status_code == 200:
                    result = response.json()
                    print(f"      ‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω (ID: {result.get('post_id')})")
                    total_posts += 1
                else:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {response.status_code}")
                    
            except Exception as e:
                print(f"      ‚ùå –û—à–∏–±–∫–∞: {e}")
            
            time.sleep(0.5)
        
        print("-" * 30)
    
    return total_posts

def check_all_channels():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã"""
    print("\nüìä –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ö–ê–ù–ê–õ–û–í")
    print("="*50)
    
    try:
        response = requests.get("http://localhost:8000/api/channels", timeout=5)
        if response.status_code == 200:
            channels = response.json()
            print(f"üì¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}")
            
            for channel in channels:
                status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if channel.get('active') else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                print(f"   ‚Ä¢ {channel.get('name', 'N/A')}: {status}")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

if __name__ == "__main__":
    print("üöÄ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–´–• –ö–ê–ù–ê–õ–û–í")
    print("="*60)
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
        add_new_channels()
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã
        special_posts = create_posts_for_new_channels()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        check_all_channels()
        
        print("\n" + "="*60)
        print("‚úÖ –ù–û–í–´–ï –ö–ê–ù–ê–õ–´ –î–û–ë–ê–í–õ–ï–ù–´!")
        print("="*60)
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {special_posts}")
        print("\nüì¢ –ù–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã:")
        print("   ‚Ä¢ @digo_online_schools (Product Design & ML)")
        print("   ‚Ä¢ @designer_lfe (–ñ–∏–∑–Ω—å –î–∏–∑–∞–π–Ω–µ—Ä–∞)")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc() 