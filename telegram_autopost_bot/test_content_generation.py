#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
"""

from integrated_content_generator import ContentGenerator
import json
from datetime import datetime, timedelta

def test_content_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    generator = ContentGenerator()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π
    audiences = ["–ù–æ–≤–∏—á–∫–∏ –≤ –¥–∏–∑–∞–π–Ω–µ", "Junior –¥–∏–∑–∞–π–Ω–µ—Ä—ã", "–§—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã", "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏"]
    content_types = ["–ü—Ä–æ–±–ª–µ–º–∞", "–†–µ—à–µ–Ω–∏–µ", "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫—É—Ä—Å–∞", "–ö–µ–π—Å", "–°–æ–≤–µ—Ç", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è"]
    
    print("\nüìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:")
    for audience in audiences:
        print(f"  ‚Ä¢ {audience}")
    
    print("\nüìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞:")
    for content_type in content_types:
        print(f"  ‚Ä¢ {content_type}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    print("\n" + "="*50)
    print("üéØ –ü–†–ò–ú–ï–†–´ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê")
    print("="*50)
    
    for audience in audiences[:2]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2 –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        print(f"\nüë• –ê–£–î–ò–¢–û–†–ò–Ø: {audience}")
        print("-" * 30)
        
        for content_type in content_types[:3]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–∏–ø–∞
            try:
                content = generator.generate_content(audience, content_type)
                print(f"\nüìã –¢–∏–ø: {content_type}")
                print(f"üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç:\n{content}")
                print("-" * 20)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {content_type} –¥–ª—è {audience}: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–∞–∫–µ—Ç–∞
    print("\n" + "="*50)
    print("üì¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–ê–ö–ï–¢–ê")
    print("="*50)
    
    try:
        batch = generator.generate_batch("–ù–æ–≤–∏—á–∫–∏ –≤ –¥–∏–∑–∞–π–Ω–µ", 3)
        print(f"\n‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(batch)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è '–ù–æ–≤–∏—á–∫–∏ –≤ –¥–∏–∑–∞–π–Ω–µ':")
        
        for i, post in enumerate(batch, 1):
            print(f"\nüìù –ü–æ—Å—Ç #{i}:")
            print(f"{post[:200]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞: {e}")

def test_content_analytics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    print("\n" + "="*50)
    print("üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–ê–õ–ò–¢–ò–ö–ò –ö–û–ù–¢–ï–ù–¢–ê")
    print("="*50)
    
    generator = ContentGenerator()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ç—Ä–∏—Ü—É –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    print("\nüéØ –ú–∞—Ç—Ä–∏—Ü–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:")
    for audience, data in generator.audience_matrix.items():
        print(f"\nüë• {audience}:")
        print(f"  ‚Ä¢ –ü—Ä–æ–±–ª–µ–º: {len(data['problems'])}")
        print(f"  ‚Ä¢ –†–µ—à–µ–Ω–∏–π: {len(data['solutions'])}")
        print(f"  ‚Ä¢ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤: {len(data['benefits'])}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    print(f"\nüìù –ë–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(generator.content_blocks)}")
    for content_type, templates in generator.content_blocks.items():
        print(f"  ‚Ä¢ {content_type}: {len(templates)} —à–∞–±–ª–æ–Ω–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º CTA
    print(f"\nüéØ CTA –≤–∞—Ä–∏–∞–Ω—Ç—ã: {len(generator.cta_variations)}")

def test_scheduling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤"""
    print("\n" + "="*50)
    print("‚è∞ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø")
    print("="*50)
    
    generator = ContentGenerator()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
    start_time = datetime.now() + timedelta(hours=1)
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        content = generator.generate_content("–ù–æ–≤–∏—á–∫–∏ –≤ –¥–∏–∑–∞–π–Ω–µ", "–°–æ–≤–µ—Ç")
        
        print(f"üìÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time}")
        print(f"üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:")
        print(f"{content[:100]}...")
        
        print("\n‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

if __name__ == "__main__":
    print("üéØ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–û–ù–¢–ï–ù–¢–ê")
    print("="*60)
    
    try:
        test_content_generation()
        test_content_analytics()
        test_scheduling()
        
        print("\n" + "="*60)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("="*60)
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc() 