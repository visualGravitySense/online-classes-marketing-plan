#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
"""

import os
import sys
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import ALL_CHANNELS

load_dotenv()

def test_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîç –¢–ï–°–¢ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    bot_token = os.getenv('BOT_TOKEN')
    if bot_token:
        print(f"‚úÖ BOT_TOKEN –Ω–∞–π–¥–µ–Ω: {bot_token[:10]}...")
    else:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª—ã
    print(f"\nüìã –ö–∞–Ω–∞–ª—ã –≤ –∫–æ–Ω—Ñ–∏–≥–µ: {len(ALL_CHANNELS)}")
    
    campaigns = {}
    for channel_id, channel_data in ALL_CHANNELS.items():
        campaign = channel_data.get('campaign', 'default')
        if campaign not in campaigns:
            campaigns[campaign] = []
        campaigns[campaign].append(channel_data.get('name', 'Unknown'))
    
    print(f"\nüéØ –ö–∞–º–ø–∞–Ω–∏–∏:")
    for campaign, channels in campaigns.items():
        print(f"   ‚Ä¢ {campaign.upper()}: {len(channels)} –∫–∞–Ω–∞–ª–æ–≤")
        for channel in channels:
            print(f"     - {channel}")
    
    return True

def test_api():
    """–¢–µ—Å—Ç API"""
    print("\nüåê –¢–ï–°–¢ API")
    print("=" * 40)
    
    try:
        import requests
        response = requests.get("http://localhost:8000/api/status", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
            data = response.json()
            print(f"   –°—Ç–∞—Ç—É—Å: {data.get('status')}")
            print(f"   –í–µ—Ä—Å–∏—è: {data.get('version')}")
            return True
        else:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not test_config():
        print("\n‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ —Ç–µ—Å—Ç")
        return
    
    # –¢–µ—Å—Ç API
    api_ok = test_api()
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê")
    print("=" * 50)
    
    if api_ok:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   python telegram_autopost_bot/quick_test_posting.py")
    else:
        print("‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("\nüí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ API —Å–µ—Ä–≤–µ—Ä:")
        print("   python telegram_autopost_bot/api.py")

if __name__ == "__main__":
    main() 