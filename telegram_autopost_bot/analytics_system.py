#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ "Digitalizacija Biznesa"
"""

import sqlite3
import json
import os
from datetime import datetime, timedelta
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from dotenv import load_dotenv
import telebot
import schedule
import time
import threading

load_dotenv()

class AnalyticsSystem:
    def __init__(self):
        self.leads_db_path = 'data/digitalizacija_leads.db'
        self.posts_db_path = 'data/digitalizacija_posts.db'
        self.reports_path = 'reports/'
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        os.makedirs(self.reports_path, exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        plt.style.use('seaborn-v0_8')
        sns.set_palette("husl")
    
    def get_leads_statistics(self, days=30):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–∏–¥–æ–≤"""
        conn = sqlite3.connect(self.leads_db_path)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_leads = pd.read_sql_query(
            'SELECT COUNT(*) as total FROM leads', conn
        ).iloc[0]['total']
        
        # –õ–∏–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
        date_filter = datetime.now() - timedelta(days=days)
        recent_leads = pd.read_sql_query(
            'SELECT COUNT(*) as recent FROM leads WHERE created_at >= ?', 
            conn, params=[date_filter]
        ).iloc[0]['recent']
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞–¥–∏—è–º –≤–æ—Ä–æ–Ω–∫–∏
        funnel_stats = pd.read_sql_query('''
            SELECT current_stage, COUNT(*) as count
            FROM leads 
            GROUP BY current_stage
            ORDER BY count DESC
        ''', conn)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        source_stats = pd.read_sql_query('''
            SELECT source, COUNT(*) as count
            FROM leads 
            GROUP BY source
            ORDER BY count DESC
        ''', conn)
        
        # –ö–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø–æ –¥–Ω—è–º
        conversions_daily = pd.read_sql_query('''
            SELECT DATE(timestamp) as date, COUNT(*) as conversions
            FROM conversions 
            WHERE timestamp >= ?
            GROUP BY DATE(timestamp)
            ORDER BY date
        ''', conn, params=[date_filter])
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        activity_stats = pd.read_sql_query('''
            SELECT action, COUNT(*) as count
            FROM interactions 
            WHERE timestamp >= ?
            GROUP BY action
            ORDER BY count DESC
        ''', conn, params=[date_filter])
        
        conn.close()
        
        return {
            'total_leads': total_leads,
            'recent_leads': recent_leads,
            'funnel_stats': funnel_stats,
            'source_stats': source_stats,
            'conversions_daily': conversions_daily,
            'activity_stats': activity_stats
        }
    
    def get_posts_statistics(self, days=30):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–æ–≤"""
        conn = sqlite3.connect(self.posts_db_path)
        
        date_filter = datetime.now() - timedelta(days=days)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤
        posts_stats = pd.read_sql_query('''
            SELECT 
                COUNT(*) as total_posts,
                COUNT(CASE WHEN status = 'sent' THEN 1 END) as sent_posts,
                COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending_posts
            FROM posts
            WHERE created_at >= ?
        ''', conn, params=[date_filter])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø–æ—Å—Ç–æ–≤
        post_types_stats = pd.read_sql_query('''
            SELECT post_type, COUNT(*) as count
            FROM posts 
            WHERE created_at >= ?
            GROUP BY post_type
            ORDER BY count DESC
        ''', conn, params=[date_filter])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
        channels_stats = pd.read_sql_query('''
            SELECT channel_id, COUNT(*) as count
            FROM posts 
            WHERE created_at >= ?
            GROUP BY channel_id
            ORDER BY count DESC
        ''', conn, params=[date_filter])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
        engagement_stats = pd.read_sql_query('''
            SELECT 
                SUM(views) as total_views,
                SUM(likes) as total_likes,
                SUM(comments) as total_comments,
                SUM(shares) as total_shares,
                AVG(views) as avg_views,
                AVG(likes) as avg_likes
            FROM posts 
            WHERE status = 'sent' AND created_at >= ?
        ''', conn, params=[date_filter])
        
        conn.close()
        
        return {
            'posts_stats': posts_stats,
            'post_types_stats': post_types_stats,
            'channels_stats': channels_stats,
            'engagement_stats': engagement_stats
        }
    
    def create_funnel_chart(self, funnel_stats):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂"""
        plt.figure(figsize=(10, 6))
        
        stages = ['awareness', 'interest', 'consideration', 'intent', 'purchase']
        stage_names = ['–û—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç—å', '–ò–Ω—Ç–µ—Ä–µ—Å', '–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ', '–ù–∞–º–µ—Ä–µ–Ω–∏–µ', '–ü–æ–∫—É–ø–∫–∞']
        
        counts = []
        for stage in stages:
            count = funnel_stats[funnel_stats['current_stage'] == stage]['count'].iloc[0] if len(funnel_stats[funnel_stats['current_stage'] == stage]) > 0 else 0
            counts.append(count)
        
        # –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–æ–Ω–∫—É
        plt.bar(stage_names, counts, color=['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for i, count in enumerate(counts):
            plt.text(i, count + max(counts) * 0.01, str(count), 
                    ha='center', va='bottom', fontweight='bold')
        
        plt.title('–í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂ - "Digitalizacija Biznesa"', fontsize=16, fontweight='bold')
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤', fontsize=12)
        plt.xticks(rotation=45)
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        filename = f"{self.reports_path}funnel_chart_{datetime.now().strftime('%Y%m%d')}.png"
        plt.savefig(filename, dpi=300, bbox_inches='tight')
        plt.close()
        
        return filename
    
    def create_conversions_chart(self, conversions_daily):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–π –ø–æ –¥–Ω—è–º"""
        plt.figure(figsize=(12, 6))
        
        if not conversions_daily.empty:
            plt.plot(conversions_daily['date'], conversions_daily['conversions'], 
                    marker='o', linewidth=2, markersize=6)
            plt.fill_between(conversions_daily['date'], conversions_daily['conversions'], 
                           alpha=0.3)
        
        plt.title('–ö–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø–æ –¥–Ω—è–º', fontsize=16, fontweight='bold')
        plt.xlabel('–î–∞—Ç–∞', fontsize=12)
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–π', fontsize=12)
        plt.xticks(rotation=45)
        plt.grid(True, alpha=0.3)
        plt.tight_layout()
        
        filename = f"{self.reports_path}conversions_chart_{datetime.now().strftime('%Y%m%d')}.png"
        plt.savefig(filename, dpi=300, bbox_inches='tight')
        plt.close()
        
        return filename
    
    def create_engagement_chart(self, post_types_stats):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–∏–ø–æ–≤ –ø–æ—Å—Ç–æ–≤"""
        plt.figure(figsize=(10, 6))
        
        colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4']
        plt.pie(post_types_stats['count'], labels=post_types_stats['post_type'], 
               autopct='%1.1f%%', colors=colors, startangle=90)
        
        plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–æ—Å—Ç–æ–≤', fontsize=16, fontweight='bold')
        plt.axis('equal')
        
        filename = f"{self.reports_path}post_types_chart_{datetime.now().strftime('%Y%m%d')}.png"
        plt.savefig(filename, dpi=300, bbox_inches='tight')
        plt.close()
        
        return filename
    
    def generate_daily_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        leads_stats = self.get_leads_statistics(days=1)
        posts_stats = self.get_posts_statistics(days=1)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = {
            'date': datetime.now().strftime('%Y-%m-%d'),
            'leads': {
                'new_leads': leads_stats['recent_leads'],
                'total_leads': leads_stats['total_leads'],
                'funnel_distribution': leads_stats['funnel_stats'].to_dict('records')
            },
            'posts': {
                'new_posts': posts_stats['posts_stats'].iloc[0]['total_posts'],
                'sent_posts': posts_stats['posts_stats'].iloc[0]['sent_posts'],
                'engagement': {
                    'total_views': posts_stats['engagement_stats'].iloc[0]['total_views'] or 0,
                    'total_likes': posts_stats['engagement_stats'].iloc[0]['total_likes'] or 0,
                    'avg_views': posts_stats['engagement_stats'].iloc[0]['avg_views'] or 0
                }
            },
            'conversions': len(leads_stats['conversions_daily'])
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        filename = f"{self.reports_path}daily_report_{datetime.now().strftime('%Y%m%d')}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        return report
    
    def generate_weekly_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        leads_stats = self.get_leads_statistics(days=7)
        posts_stats = self.get_posts_statistics(days=7)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        funnel_chart = self.create_funnel_chart(leads_stats['funnel_stats'])
        conversions_chart = self.create_conversions_chart(leads_stats['conversions_daily'])
        engagement_chart = self.create_engagement_chart(posts_stats['post_types_stats'])
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = {
            'period': f"{datetime.now() - timedelta(days=7):%Y-%m-%d} - {datetime.now():%Y-%m-%d}",
            'leads': {
                'new_leads': leads_stats['recent_leads'],
                'total_leads': leads_stats['total_leads'],
                'funnel_distribution': leads_stats['funnel_stats'].to_dict('records'),
                'top_sources': leads_stats['source_stats'].to_dict('records'),
                'conversions': len(leads_stats['conversions_daily'])
            },
            'posts': {
                'total_posts': posts_stats['posts_stats'].iloc[0]['total_posts'],
                'sent_posts': posts_stats['posts_stats'].iloc[0]['sent_posts'],
                'post_types': posts_stats['post_types_stats'].to_dict('records'),
                'engagement': posts_stats['engagement_stats'].to_dict('records')[0]
            },
            'charts': {
                'funnel': funnel_chart,
                'conversions': conversions_chart,
                'engagement': engagement_chart
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        filename = f"{self.reports_path}weekly_report_{datetime.now().strftime('%Y%m%d')}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        return report
    
    def generate_monthly_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        leads_stats = self.get_leads_statistics(days=30)
        posts_stats = self.get_posts_statistics(days=30)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        funnel_chart = self.create_funnel_chart(leads_stats['funnel_stats'])
        conversions_chart = self.create_conversions_chart(leads_stats['conversions_daily'])
        engagement_chart = self.create_engagement_chart(posts_stats['post_types_stats'])
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        trends = self.analyze_trends(leads_stats, posts_stats)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = {
            'period': f"{datetime.now() - timedelta(days=30):%Y-%m-%d} - {datetime.now():%Y-%m-%d}",
            'summary': {
                'total_leads': leads_stats['total_leads'],
                'new_leads': leads_stats['recent_leads'],
                'conversion_rate': self.calculate_conversion_rate(leads_stats),
                'avg_engagement': posts_stats['engagement_stats'].iloc[0]['avg_views'] or 0
            },
            'leads': {
                'funnel_distribution': leads_stats['funnel_stats'].to_dict('records'),
                'top_sources': leads_stats['source_stats'].to_dict('records'),
                'activity_breakdown': leads_stats['activity_stats'].to_dict('records'),
                'conversions_timeline': leads_stats['conversions_daily'].to_dict('records')
            },
            'posts': {
                'total_posts': posts_stats['posts_stats'].iloc[0]['total_posts'],
                'sent_posts': posts_stats['posts_stats'].iloc[0]['sent_posts'],
                'post_types': posts_stats['post_types_stats'].to_dict('records'),
                'channels_performance': posts_stats['channels_stats'].to_dict('records'),
                'engagement_metrics': posts_stats['engagement_stats'].to_dict('records')[0]
            },
            'trends': trends,
            'charts': {
                'funnel': funnel_chart,
                'conversions': conversions_chart,
                'engagement': engagement_chart
            },
            'recommendations': self.generate_recommendations(leads_stats, posts_stats)
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        filename = f"{self.reports_path}monthly_report_{datetime.now().strftime('%Y%m%d')}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"‚úÖ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        return report
    
    def analyze_trends(self, leads_stats, posts_stats):
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤"""
        trends = {
            'leads_growth': 'stable',
            'conversion_trend': 'stable',
            'engagement_trend': 'stable',
            'content_performance': 'stable'
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—Å—Ç –ª–∏–¥–æ–≤
        if leads_stats['recent_leads'] > 10:
            trends['leads_growth'] = 'increasing'
        elif leads_stats['recent_leads'] < 5:
            trends['leads_growth'] = 'decreasing'
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
        conversions_count = len(leads_stats['conversions_daily'])
        if conversions_count > 5:
            trends['conversion_trend'] = 'increasing'
        elif conversions_count < 2:
            trends['conversion_trend'] = 'decreasing'
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å
        avg_views = posts_stats['engagement_stats'].iloc[0]['avg_views'] or 0
        if avg_views > 100:
            trends['engagement_trend'] = 'increasing'
        elif avg_views < 50:
            trends['engagement_trend'] = 'decreasing'
        
        return trends
    
    def calculate_conversion_rate(self, leads_stats):
        """–†–∞—Å—á–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"""
        total_leads = leads_stats['total_leads']
        conversions = len(leads_stats['conversions_daily'])
        
        if total_leads > 0:
            return round((conversions / total_leads) * 100, 2)
        return 0
    
    def generate_recommendations(self, leads_stats, posts_stats):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ –≤–æ—Ä–æ–Ω–∫–∏
        funnel_data = leads_stats['funnel_stats']
        awareness_count = funnel_data[funnel_data['current_stage'] == 'awareness']['count'].iloc[0] if len(funnel_data[funnel_data['current_stage'] == 'awareness']) > 0 else 0
        purchase_count = funnel_data[funnel_data['current_stage'] == 'purchase']['count'].iloc[0] if len(funnel_data[funnel_data['current_stage'] == 'purchase']) > 0 else 0
        
        if awareness_count > 0 and purchase_count == 0:
            recommendations.append("–£–ª—É—á—à–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é –≤ –ø—Ä–æ–¥–∞–∂–∏: –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ–¥–∞—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        
        if awareness_count < 10:
            recommendations.append("–£–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–∏—Ç–æ–∫ –ª–∏–¥–æ–≤: –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ —É–ª—É—á—à–∏—Ç—å SEO")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        engagement_avg = posts_stats['engagement_stats'].iloc[0]['avg_views'] or 0
        if engagement_avg < 50:
            recommendations.append("–£–ª—É—á—à–∏—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        
        # –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_data = leads_stats['activity_stats']
        if len(activity_data) < 5:
            recommendations.append("–£–≤–µ–ª–∏—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        
        return recommendations
    
    def send_report_to_telegram(self, report, report_type):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ Telegram"""
        bot_token = os.getenv('BOT_TOKEN')
        admin_id = os.getenv('ADMIN_ID')
        
        if not bot_token or not admin_id:
            print("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã BOT_TOKEN –∏–ª–∏ ADMIN_ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤")
            return
        
        bot = telebot.TeleBot(bot_token)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        if report_type == 'daily':
            text = f"""
üìä **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç - {report['date']}**

üë• **–õ–∏–¥—ã:**
‚Ä¢ –ù–æ–≤—ã—Ö –ª–∏–¥–æ–≤: {report['leads']['new_leads']}
‚Ä¢ –í—Å–µ–≥–æ –ª–∏–¥–æ–≤: {report['leads']['total_leads']}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–π: {report['conversions']}

üìù **–ü–æ—Å—Ç—ã:**
‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: {report['posts']['new_posts']}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {report['posts']['sent_posts']}
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {report['posts']['engagement']['total_views']}
‚Ä¢ –õ–∞–π–∫–æ–≤: {report['posts']['engagement']['total_likes']}
            """
        elif report_type == 'weekly':
            text = f"""
üìä **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç - {report['period']}**

üë• **–õ–∏–¥—ã:**
‚Ä¢ –ù–æ–≤—ã—Ö –ª–∏–¥–æ–≤: {report['leads']['new_leads']}
‚Ä¢ –í—Å–µ–≥–æ –ª–∏–¥–æ–≤: {report['leads']['total_leads']}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–π: {report['leads']['conversions']}

üìù **–ü–æ—Å—Ç—ã:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {report['posts']['total_posts']}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {report['posts']['sent_posts']}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {report['posts']['engagement']['avg_views']}
            """
        else:  # monthly
            text = f"""
üìä **–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç - {report['period']}**

üìà **–°–≤–æ–¥–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ª–∏–¥–æ–≤: {report['summary']['total_leads']}
‚Ä¢ –ù–æ–≤—ã—Ö –ª–∏–¥–æ–≤: {report['summary']['new_leads']}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {report['summary']['conversion_rate']}%
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: {report['summary']['avg_engagement']}

üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
{chr(10).join([f"‚Ä¢ {rec}" for rec in report['recommendations'][:3]])}
            """
        
        try:
            bot.send_message(admin_id, text, parse_mode='Markdown')
            print(f"‚úÖ –û—Ç—á–µ—Ç {report_type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤"""
        print("üìÖ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤...")
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 9:00
        schedule.every().day.at("09:00").do(self.run_daily_report)
        
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º –≤ 10:00
        schedule.every().sunday.at("10:00").do(self.run_weekly_report)
        
        # –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –≤ 11:00
        schedule.every().month.at("11:00").do(self.run_monthly_report)
        
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω")
        print("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç: 9:00")
        print("üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 10:00")
        print("üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç: 1-–µ —á–∏—Å–ª–æ 11:00")
        
        while True:
            schedule.run_pending()
            time.sleep(60)
    
    def run_daily_report(self):
        """–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report = self.generate_daily_report()
        self.send_report_to_telegram(report, 'daily')
    
    def run_weekly_report(self):
        """–ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report = self.generate_weekly_report()
        self.send_report_to_telegram(report, 'weekly')
    
    def run_monthly_report(self):
        """–ó–∞–ø—É—Å–∫ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report = self.generate_monthly_report()
        self.send_report_to_telegram(report, 'monthly')

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analytics = AnalyticsSystem()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
    print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤...")
    
    daily_report = analytics.generate_daily_report()
    weekly_report = analytics.generate_weekly_report()
    monthly_report = analytics.generate_monthly_report()
    
    print("‚úÖ –í—Å–µ –æ—Ç—á–µ—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    analytics.run_scheduler()

if __name__ == "__main__":
    main() 