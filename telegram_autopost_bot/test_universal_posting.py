#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
"""

import os
import sys
import requests
from datetime import datetime, timedelta
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import ALL_CHANNELS, POST_TEMPLATES

load_dotenv()

def generate_test_content(campaign: str, channel_name: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    if campaign == 'digitalizacija':
        return f"""
üéØ –¢–ï–°–¢–û–í–´–ô –ü–û–°–¢ - –¶–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å–∞

üìù –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞.
–ö–∞–Ω–∞–ª: {channel_name}
–ö–∞–º–ø–∞–Ω–∏—è: {campaign.upper()}

üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ —Ä—É—Ç–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏

üìä 85% –∫–æ–º–ø–∞–Ω–∏–π —ç–∫–æ–Ω–æ–º—è—Ç –≤—Ä–µ–º—è –±–ª–∞–≥–æ–¥–∞—Ä—è —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏

‚ùì –ö–∞–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ –º–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å?

#—Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è #–±–∏–∑–Ω–µ—Å #–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è #—Ç–µ—Å—Ç
        """.strip()
    
    else:  # default (UXUI)
        return f"""
üí° –¢–ï–°–¢–û–í–´–ô –ü–û–°–¢ - UX/UI –î–∏–∑–∞–π–Ω

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞.
–ö–∞–Ω–∞–ª: {channel_name}
–ö–∞–º–ø–∞–Ω–∏—è: {campaign.upper()}

üîñ –°–æ—Ö—Ä–∞–Ω—è–π –ø–æ—Å—Ç, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å!
üí¨ –î–µ–ª–∏—Å—å —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö

#UXUITips #–î–∏–∑–∞–π–Ω #–û–±—É—á–µ–Ω–∏–µ #—Ç–µ—Å—Ç
        """.strip()

def send_test_post(channel_id: str, channel_name: str, campaign: str) -> dict:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞"""
    try:
        content = generate_test_content(campaign, channel_name)
        scheduled_time = datetime.now() + timedelta(minutes=2)
        
        post_data = {
            "content": content,
            "channel_id": channel_id,
            "scheduled_time": scheduled_time.isoformat(),
            "media_path": None,
            "media_type": None
        }
        
        response = requests.post("http://localhost:8000/api/posts", json=post_data, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            return {
                'status': 'success',
                'post_id': result.get('post_id'),
                'message': f"–ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –≤ {channel_name}"
            }
        else:
            return {
                'status': 'error',
                'error': f"API –æ—à–∏–±–∫–∞ {response.status_code}",
                'message': f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {channel_name}"
            }
            
    except Exception as e:
        return {
            'status': 'error',
            'error': str(e),
            'message': f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {channel_name}"
        }

def test_all_channels():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–£–ë–õ–ò–ö–ê–¶–ò–ò –í–û –í–°–ï –ö–ê–ù–ê–õ–´")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    try:
        response = requests.get("http://localhost:8000/api/status", timeout=5)
        if response.status_code != 200:
            print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ API —Å–µ—Ä–≤–µ—Ä:")
            print("   python telegram_autopost_bot/api.py")
            return
    except Exception as e:
        print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return
    
    print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    active_channels = {}
    for channel_id, channel_data in ALL_CHANNELS.items():
        if channel_data.get('active', True):
            active_channels[channel_id] = channel_data
    
    print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(active_channels)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º
    campaigns = {}
    for channel_id, channel_data in active_channels.items():
        campaign = channel_data.get('campaign', 'default')
        if campaign not in campaigns:
            campaigns[campaign] = []
        campaigns[campaign].append((channel_id, channel_data))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–∞–º–ø–∞–Ω–∏—é
    total_success = 0
    total_errors = 0
    
    for campaign, channels in campaigns.items():
        print(f"\nüéØ –ö–ê–ú–ü–ê–ù–ò–Ø: {campaign.upper()}")
        print("-" * 40)
        
        campaign_success = 0
        campaign_errors = 0
        
        for channel_id, channel_data in channels:
            channel_name = channel_data.get('name', 'Unknown')
            print(f"\nüì¢ –ö–∞–Ω–∞–ª: {channel_name}")
            
            result = send_test_post(channel_id, channel_name, campaign)
            
            if result['status'] == 'success':
                campaign_success += 1
                total_success += 1
                print(f"   ‚úÖ {result['message']}")
                print(f"   üìù ID –ø–æ—Å—Ç–∞: {result['post_id']}")
            else:
                campaign_errors += 1
                total_errors += 1
                print(f"   ‚ùå {result['message']}")
                print(f"   üîç –û—à–∏–±–∫–∞: {result['error']}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–º–ø–∞–Ω–∏–∏ {campaign.upper()}:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {campaign_success}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {campaign_errors}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    print(f"üéØ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(active_channels)}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {total_success}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {total_errors}")
    
    if total_errors == 0:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üìù –ü–æ—Å—Ç—ã –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã")
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –æ—à–∏–±–∫–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤")

if __name__ == "__main__":
    test_all_channels() 