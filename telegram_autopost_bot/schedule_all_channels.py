#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö
"""

import requests
import time
from datetime import datetime, timedelta
from integrated_content_generator import ContentGenerator

def get_all_channels():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        response = requests.get("http://localhost:8000/api/channels", timeout=10)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {response.status_code}")
            return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []

def schedule_posts_for_week():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    
    print("üìÖ –°–û–ó–î–ê–ù–ò–ï –†–ê–°–ü–ò–°–ê–ù–ò–Ø –ù–ê –ù–ï–î–ï–õ–Æ")
    print("="*60)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    channels = get_all_channels()
    if not channels:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤")
        return
    
    print(f"üì¢ –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}")
    
    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    schedule_times = {
        'monday': ['09:00', '14:00', '18:00'],
        'tuesday': ['10:00', '15:00', '19:00'],
        'wednesday': ['09:30', '14:30', '18:30'],
        'thursday': ['09:00', '14:00', '18:00'],
        'friday': ['10:00', '15:00', '19:00'],
        'saturday': ['11:00', '16:00'],
        'sunday': ['12:00', '17:00']
    }
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    channel_configs = {
        'digo_online_schools': {
            'audience': '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏',
            'content_types': ['–ö–µ–π—Å', '–°–æ–≤–µ—Ç'],
            'themes': ['ML –≤ –¥–∏–∑–∞–π–Ω–µ', 'Product Design', 'AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã']
        },
        'designer_lfe': {
            'audience': '–§—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã',
            'content_types': ['–°–æ–≤–µ—Ç', '–ö–µ–π—Å'],
            'themes': ['–ö–∞—Ä—å–µ—Ä–∞ –¥–∏–∑–∞–π–Ω–µ—Ä–∞', '–î–∏–∑–∞–π–Ω-–º—ã—à–ª–µ–Ω–∏–µ', '–ë–∏–∑–Ω–µ—Å –≤ –¥–∏–∑–∞–π–Ω–µ']
        },
        'digoGraphickDesign': {
            'audience': '–ù–æ–≤–∏—á–∫–∏',
            'content_types': ['–°–æ–≤–µ—Ç', '–û–±—É—á–µ–Ω–∏–µ'],
            'themes': ['–û—Å–Ω–æ–≤—ã –¥–∏–∑–∞–π–Ω–∞', '–¶–≤–µ—Ç–∞ –∏ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞', '–ö–æ–º–ø–æ–∑–∏—Ü–∏—è']
        },
        'digoUI': {
            'audience': '–î–∂—É–Ω–∏–æ—Ä—ã',
            'content_types': ['–ö–µ–π—Å', '–°–æ–≤–µ—Ç'],
            'themes': ['UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã', 'UX –ø—Ä–∏–Ω—Ü–∏–ø—ã', '–ü—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ']
        }
    }
    
    generator = ContentGenerator()
    total_posts = 0
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
    start_date = datetime.now() + timedelta(days=1)
    start_date = start_date.replace(hour=0, minute=0, second=0, microsecond=0)
    
    for day_name, times in schedule_times.items():
        print(f"\nüìÖ {day_name.upper()}")
        print("-" * 40)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        days_ahead = {
            'monday': 0, 'tuesday': 1, 'wednesday': 2, 'thursday': 3,
            'friday': 4, 'saturday': 5, 'sunday': 6
        }
        
        target_date = start_date + timedelta(days=days_ahead[day_name])
        
        for time_str in times:
            print(f"   ‚è∞ {time_str}")
            
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            hour, minute = map(int, time_str.split(':'))
            post_time = target_date.replace(hour=hour, minute=minute)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            for channel in channels:
                channel_name = channel.get('name', 'unknown')
                chat_id = channel.get('chat_id')
                
                if not chat_id:
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∫–∞–Ω–∞–ª–∞
                config = channel_configs.get(channel_name, {
                    'audience': '–ù–æ–≤–∏—á–∫–∏',
                    'content_types': ['–°–æ–≤–µ—Ç'],
                    'themes': ['UX/UI –¥–∏–∑–∞–π–Ω']
                })
                
                # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                content_type = config['content_types'][total_posts % len(config['content_types'])]
                
                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                    content = generator.generate_content(
                        config['audience'],
                        content_type
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
                    post_data = {
                        "content": content,
                        "channel_id": chat_id,
                        "scheduled_time": post_time.isoformat(),
                        "media_path": None,
                        "media_type": None
                    }
                    
                    response = requests.post("http://localhost:8000/api/posts", json=post_data, timeout=10)
                    
                    if response.status_code == 200:
                        result = response.json()
                        print(f"      ‚úÖ {channel_name}: {content_type} (ID: {result.get('post_id')})")
                        total_posts += 1
                    else:
                        print(f"      ‚ùå {channel_name}: –æ—à–∏–±–∫–∞ {response.status_code}")
                        
                except Exception as e:
                    print(f"      ‚ùå {channel_name}: {e}")
                
                time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
            print()
    
    return total_posts

def create_special_posts():
    """–°–æ–∑–¥–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    
    print("\nüéØ –°–û–ó–î–ê–ù–ò–ï –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –ü–û–°–¢–û–í")
    print("="*50)
    
    special_posts = [
        {
            'channel_id': '-1002316535443',  # digo_online_schools
            'content': """üöÄ –ù–û–í–´–ô –ö–ê–ù–ê–õ: Product Design & ML

ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä, –≥–¥–µ –¥–∏–∑–∞–π–Ω –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º!

üí° –ó–¥–µ—Å—å –º—ã –∏–∑—É—á–∞–µ–º:
‚Ä¢ –ö–∞–∫ ML –º–µ–Ω—è–µ—Ç –¥–∏–∑–∞–π–Ω –ø—Ä–æ–¥—É–∫—Ç–æ–≤
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
‚Ä¢ AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤
‚Ä¢ –ö–µ–π—Å—ã —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤

üìä –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã

üéØ –ì–æ—Ç–æ–≤—ã —Å—Ç–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –≤ Product Design & ML?

#ProductDesign #MachineLearning #UXDesign #–ù–æ–≤—ã–π–ö–∞–Ω–∞–ª""",
            'scheduled_time': datetime.now() + timedelta(hours=1)
        },
        {
            'channel_id': '-1001903756368',  # designer_lfe
            'content': """üé® –ù–û–í–´–ô –ö–ê–ù–ê–õ: –ñ–∏–∑–Ω—å –î–∏–∑–∞–π–Ω–µ—Ä–∞

üíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤!

üî• –ó–¥–µ—Å—å –º—ã –æ–±—Å—É–∂–¥–∞–µ–º:
‚Ä¢ –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç –≤ –¥–∏–∑–∞–π–Ω–µ
‚Ä¢ –î–∏–∑–∞–π–Ω-–º—ã—à–ª–µ–Ω–∏–µ –≤ –∂–∏–∑–Ω–∏
‚Ä¢ –ë–∏–∑–Ω–µ—Å-–∞—Å–ø–µ–∫—Ç—ã –¥–∏–∑–∞–π–Ω–∞
‚Ä¢ –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å

üí° –ö–∞–∂–¥—ã–π –ø–æ—Å—Ç - —à–∞–≥ –∫ —É—Å–ø–µ—à–Ω–æ–π –∫–∞—Ä—å–µ—Ä–µ

üéØ –ì–æ—Ç–æ–≤—ã —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ?

#–ñ–∏–∑–Ω—å–î–∏–∑–∞–π–Ω–µ—Ä–∞ #–ö–∞—Ä—å–µ—Ä–∞ #UXUI #–ù–æ–≤—ã–π–ö–∞–Ω–∞–ª""",
            'scheduled_time': datetime.now() + timedelta(hours=2)
        }
    ]
    
    total_special = 0
    
    for post_info in special_posts:
        try:
            post_data = {
                "content": post_info['content'],
                "channel_id": post_info['channel_id'],
                "scheduled_time": post_info['scheduled_time'].isoformat(),
                "media_path": None,
                "media_type": None
            }
            
            response = requests.post("http://localhost:8000/api/posts", json=post_data, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç —Å–æ–∑–¥–∞–Ω (ID: {result.get('post_id')})")
                total_special += 1
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    return total_special

def check_scheduled_posts():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
    print("\nüìä –ü–†–û–í–ï–†–ö–ê –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–• –ü–û–°–¢–û–í")
    print("="*50)
    
    try:
        response = requests.get("http://localhost:8000/api/posts", timeout=10)
        if response.status_code == 200:
            posts = response.json()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞–Ω–∞–ª–∞–º
            channel_posts = {}
            for post in posts:
                channel_id = post.get('channel_id')
                if channel_id not in channel_posts:
                    channel_posts[channel_id] = 0
                channel_posts[channel_id] += 1
            
            print(f"üìù –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}")
            print("\nüì¢ –ü–æ –∫–∞–Ω–∞–ª–∞–º:")
            for channel_id, count in channel_posts.items():
                print(f"   ‚Ä¢ {channel_id}: {count} –ø–æ—Å—Ç–æ–≤")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

if __name__ == "__main__":
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï –í–°–ï–• –ö–ê–ù–ê–õ–û–í")
    print("="*70)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã
        special_posts = create_special_posts()
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
        weekly_posts = schedule_posts_for_week()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        check_scheduled_posts()
        
        print("\n" + "="*70)
        print("‚úÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï –°–û–ó–î–ê–ù–û!")
        print("="*70)
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ –ø–æ—Å—Ç–æ–≤:")
        print(f"   ‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö: {special_posts}")
        print(f"   ‚Ä¢ –ù–∞ –Ω–µ–¥–µ–ª—é: {weekly_posts}")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ: {special_posts + weekly_posts}")
        print("\nüì¢ –ö–∞–Ω–∞–ª—ã –≤ —Å–∏—Å—Ç–µ–º–µ:")
        channels = get_all_channels()
        for channel in channels:
            print(f"   ‚Ä¢ {channel.get('name', 'N/A')} ({channel.get('chat_id', 'N/A')})")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc() 