#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–∞–º–ø–∞–Ω–∏–∏ "Digitalizacija Biznesa"
–í–∫–ª—é—á–∞–µ—Ç: –ø–æ—Å—Ç–∏–Ω–≥, –ª–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é, –∞–Ω–∞–ª–∏—Ç–∏–∫—É
"""

import os
import sys
import json
import time
import threading
from datetime import datetime
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from welcome_posts import WelcomePostsManager
from digitalizacija_scheduler import DigitalizacijaScheduler
from lead_generation_bot import LeadGenerationBot
from analytics_system import AnalyticsSystem
from config import DIGITALIZACIJA_CHANNELS

load_dotenv()

class CompleteDigitalizacijaSystem:
    def __init__(self):
        self.system_name = "Digitalizacija Biznesa"
        self.version = "2.0.0"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        self.check_environment()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.welcome_manager = WelcomePostsManager()
        self.scheduler = DigitalizacijaScheduler()
        self.lead_bot = LeadGenerationBot()
        self.analytics = AnalyticsSystem()
        
        # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.components_status = {
            'scheduler': False,
            'lead_bot': False,
            'analytics': False
        }
    
    def check_environment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        required_vars = [
            'BOT_TOKEN',
            'ADMIN_ID'
        ]
        
        missing_vars = []
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)
        
        if missing_vars:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
            print("–î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ .env —Ñ–∞–π–ª")
            sys.exit(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –∫–∞–Ω–∞–ª–æ–≤
        channel_vars = [
            'DIGITALIZACIJA_MAIN_CHANNEL_ID',
            'BIZNES_AUTOMATION_CHANNEL_ID',
            'STARTUP_DIGITAL_CHANNEL_ID',
            'DIGITALIZACIJA_COMMUNITY_ID',
            'BIZNES_CONSULTING_ID',
            'AUTOMATION_TIPS_ID'
        ]
        
        missing_channels = []
        for var in channel_vars:
            if not os.getenv(var):
                missing_channels.append(var)
        
        if missing_channels:
            print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ID –∫–∞–Ω–∞–ª–æ–≤: {', '.join(missing_channels)}")
            print("–°–æ–∑–¥–∞–π—Ç–µ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö ID –≤ .env —Ñ–∞–π–ª")
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def load_channel_ids(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ ID –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            with open('digitalizacija_channel_ids.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            return {
                'digitalizacija_main': {
                    'chat_id': os.getenv('DIGITALIZACIJA_MAIN_CHANNEL_ID'),
                    'username': 'digitalizacija_biznesa'
                },
                'biznes_automation': {
                    'chat_id': os.getenv('BIZNES_AUTOMATION_CHANNEL_ID'),
                    'username': 'biznes_automation'
                },
                'startup_digital': {
                    'chat_id': os.getenv('STARTUP_DIGITAL_CHANNEL_ID'),
                    'username': 'startup_digital'
                },
                'digitalizacija_community': {
                    'chat_id': os.getenv('DIGITALIZACIJA_COMMUNITY_ID'),
                    'username': 'digitalizacija_community'
                },
                'biznes_consulting': {
                    'chat_id': os.getenv('BIZNES_CONSULTING_ID'),
                    'username': 'biznes_consulting'
                },
                'automation_tips': {
                    'chat_id': os.getenv('AUTOMATION_TIPS_ID'),
                    'username': 'automation_tips'
                }
            }
    
    def initialize_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        print("\nüöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´")
        print("=" * 50)
        
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
        print("\n1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤...")
        channel_ids = self.load_channel_ids()
        welcome_results = self.welcome_manager.send_all_welcome_posts(channel_ids)
        
        success_count = sum(1 for r in welcome_results.values() if r['status'] == 'success')
        total_count = len(welcome_results)
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} —É—Å–ø–µ—à–Ω–æ")
        
        # 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        print("\n2Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        try:
            self.scheduler.create_test_posts()
            self.scheduler.schedule_weekly_content()
            self.components_status['scheduler'] = True
            print("   ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        
        # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        try:
            self.analytics.generate_daily_report()
            print("   ‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        
        print("\n‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        def run_scheduler():
            try:
                self.scheduler.run_scheduler()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                self.components_status['scheduler'] = False
        
        scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
        scheduler_thread.start()
        self.components_status['scheduler'] = True
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    
    def start_lead_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ª–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        def run_lead_bot():
            try:
                self.lead_bot.run()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞ –ª–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
                self.components_status['lead_bot'] = False
        
        lead_bot_thread = threading.Thread(target=run_lead_bot, daemon=True)
        lead_bot_thread.start()
        self.components_status['lead_bot'] = True
        print("‚úÖ –ë–æ—Ç –ª–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω")
    
    def start_analytics(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        def run_analytics():
            try:
                self.analytics.run_scheduler()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
                self.components_status['analytics'] = False
        
        analytics_thread = threading.Thread(target=run_analytics, daemon=True)
        analytics_thread.start()
        self.components_status['analytics'] = True
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞")
    
    def show_status(self):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        print("\nüìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´")
        print("=" * 50)
        
        status_icons = {True: "‚úÖ", False: "‚ùå"}
        
        for component, status in self.components_status.items():
            icon = status_icons[status]
            print(f"{icon} {component}: {'–ê–∫—Ç–∏–≤–µ–Ω' if status else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        try:
            leads_stats = self.analytics.get_leads_statistics(days=7)
            posts_stats = self.analytics.get_posts_statistics(days=7)
            
            print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:")
            print(f"   –õ–∏–¥–æ–≤: {leads_stats['recent_leads']}")
            print(f"   –ü–æ—Å—Ç–æ–≤: {posts_stats['posts_stats'].iloc[0]['sent_posts']}")
            print(f"   –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {posts_stats['engagement_stats'].iloc[0]['total_views'] or 0}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def show_menu(self):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        print("\nüéõÔ∏è –ú–ï–ù–Æ –£–ü–†–ê–í–õ–ï–ù–ò–Ø")
        print("=" * 50)
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        print("2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã")
        print("3. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã")
        print("4. –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")
        print("5. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("6. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç")
        print("7. –í—ã—Ö–æ–¥")
        print("-" * 50)
    
    def restart_component(self, component_name):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        print(f"\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ {component_name}...")
        
        if component_name == 'scheduler':
            self.components_status['scheduler'] = False
            time.sleep(2)
            self.start_scheduler()
        elif component_name == 'lead_bot':
            self.components_status['lead_bot'] = False
            time.sleep(2)
            self.start_lead_bot()
        elif component_name == 'analytics':
            self.components_status['analytics'] = False
            time.sleep(2)
            self.start_analytics()
        
        print(f"‚úÖ {component_name} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
    
    def run_interactive(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
        print(f"üöÄ –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ {self.system_name} v{self.version}")
        print("=" * 60)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
        self.initialize_system()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        print("\nüöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
        print("=" * 50)
        
        self.start_scheduler()
        self.start_lead_bot()
        self.start_analytics()
        
        print("\nüéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã!")
        print("–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ")
        
        while True:
            self.show_menu()
            
            try:
                choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-7): ").strip()
                
                if choice == '1':
                    self.show_status()
                    
                elif choice == '2':
                    print("\nüìù –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤...")
                    channel_ids = self.load_channel_ids()
                    self.welcome_manager.send_all_welcome_posts(channel_ids)
                    
                elif choice == '3':
                    print("\nüß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤...")
                    self.scheduler.create_test_posts()
                    
                elif choice == '4':
                    print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
                    report_type = input("–¢–∏–ø –æ—Ç—á–µ—Ç–∞ (daily/weekly/monthly): ").strip()
                    
                    if report_type == 'daily':
                        self.analytics.generate_daily_report()
                    elif report_type == 'weekly':
                        self.analytics.generate_weekly_report()
                    elif report_type == 'monthly':
                        self.analytics.generate_monthly_report()
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞")
                    
                elif choice == '5':
                    self.show_status()
                    
                elif choice == '6':
                    print("\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞...")
                    print("1. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
                    print("2. –ë–æ—Ç –ª–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                    print("3. –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
                    
                    component_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (1-3): ").strip()
                    
                    if component_choice == '1':
                        self.restart_component('scheduler')
                    elif component_choice == '2':
                        self.restart_component('lead_bot')
                    elif component_choice == '3':
                        self.restart_component('analytics')
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                    
                elif choice == '7':
                    print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã...")
                    break
                    
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    
            except KeyboardInterrupt:
                print("\n\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã...")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def run_automatic(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º"""
        print(f"üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã {self.system_name}")
        print("=" * 60)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
        self.initialize_system()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        print("\nüöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
        print("=" * 50)
        
        self.start_scheduler()
        self.start_lead_bot()
        self.start_analytics()
        
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ!")
        print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            while True:
                time.sleep(300)  # 5 –º–∏–Ω—É—Ç
                self.show_status()
                
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def run(self, mode='interactive'):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        if mode == 'automatic':
            self.run_automatic()
        else:
            self.run_interactive()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–∞–º–ø–∞–Ω–∏–∏ "Digitalizacija Biznesa"')
    parser.add_argument('--mode', choices=['interactive', 'automatic'], 
                       default='interactive', help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã')
    parser.add_argument('--init-only', action='store_true', 
                       help='–¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã')
    parser.add_argument('--status-only', action='store_true', 
                       help='–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞')
    
    args = parser.parse_args()
    
    system = CompleteDigitalizacijaSystem()
    
    if args.init_only:
        print("üöÄ –¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        system.initialize_system()
    elif args.status_only:
        print("üìä –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã...")
        system.show_status()
    else:
        system.run(args.mode)

if __name__ == "__main__":
    main() 