#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è UX/UI –∫—É—Ä—Å–∞
–†–∞–±–æ—Ç–∞–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π Telegram –±–æ—Ç–∞
"""

import json
import random
import requests
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–µ
sys.path.append('../telegram_autopost_bot')

try:
    from config import CHANNELS, POSTING_SCHEDULE
except ImportError:
    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å config.py. –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    CHANNELS = {
        'digoGraphickDesign': {
            'chat_id': '-1002091962525',
            'name': 'digoGraphickDesign',
            'active': True
        },
        'digoUI': {
            'chat_id': '-1002123538949',
            'name': 'digoUI',
            'active': True
        }
    }
    POSTING_SCHEDULE = {
        'monday': ['09:00', '14:00', '18:00'],
        'tuesday': ['10:00', '15:00', '19:00'],
        'wednesday': ['09:30', '14:30', '18:30'],
        'thursday': ['09:00', '14:00', '18:00'],
        'friday': ['10:00', '15:00', '19:00'],
        'saturday': ['11:00', '16:00'],
        'sunday': ['12:00', '17:00']
    }

class IntegratedContentGenerator:
    def __init__(self, api_base_url: str = "http://localhost:8000"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        self.api_base_url = api_base_url
        self.audiences = {
            "–Ω–æ–≤–∏—á–∫–∏": {
                "pain_points": [
                    "–ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ UX/UI",
                    "–ë–æ—é—Å—å, —á—Ç–æ —É –º–µ–Ω—è –Ω–µ—Ç —Ç–∞–ª–∞–Ω—Ç–∞ –∫ –¥–∏–∑–∞–π–Ω—É",
                    "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º?",
                    "–ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω–æ –∏–∑—É—á–∞—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?",
                    "–ö–∞–∫ –ø–æ–Ω—è—Ç—å, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –º–Ω–µ —ç—Ç–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è?"
                ],
                "solutions": [
                    "–ü–æ—à–∞–≥–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å –Ω—É–ª—è –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π",
                    "–ü–æ–Ω—è—Ç–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π",
                    "–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –∫—É—Ä—Å–∞",
                    "–ü–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
                    "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞"
                ],
                "benefits": [
                    "–°–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Å –Ω—É–ª—è",
                    "–ü—Ä–æ–≤–æ–¥–∏—Ç—å UX-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É",
                    "–†–∞–±–æ—Ç–∞—Ç—å –≤ Figma –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ",
                    "–°–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã"
                ],
                "salary_range": "–æ—Ç $500 –¥–æ $1200",
                "time_to_result": "3-6 –º–µ—Å—è—Ü–µ–≤",
                "tone": "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π",
                "target_channels": ["digoGraphickDesign"]  # –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤
            },
            "junior": {
                "pain_points": [
                    "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—É—é —Ä–∞–±–æ—Ç—É –≤ IT",
                    "–ú–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–µ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ HR",
                    "–ù–µ –∑–Ω–∞—é, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–µ–∑–µ–Ω—Ç–æ–≤–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã",
                    "–ë–æ—é—Å—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π - –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç",
                    "–ö–∞–∫ –ø–µ—Ä–µ–π—Ç–∏ –æ—Ç —É—á–µ–±–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∫ —Ä–µ–∞–ª—å–Ω—ã–º?"
                ],
                "solutions": [
                    "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–º–µ—Ç—è—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–∏",
                    "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º",
                    "–†–µ–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
                    "–°–≤—è–∑–∏ –≤ IT-–∏–Ω–¥—É—Å—Ç—Ä–∏–∏",
                    "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç—ã"
                ],
                "benefits": [
                    "–°–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤–ª–µ–∫–∞—é—Ç HR",
                    "–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–µ–∑–µ–Ω—Ç–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ä–∞–±–æ—Ç—ã",
                    "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º –≤ IT",
                    "–ù–∞–π—Ç–∏ —Å–≤—è–∑–∏ –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏"
                ],
                "salary_range": "–æ—Ç $1200 –¥–æ $2500",
                "time_to_result": "1-3 –º–µ—Å—è—Ü–∞",
                "tone": "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π",
                "target_channels": ["digoUI"]  # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è junior
            },
            "freelancers": {
                "pain_points": [
                    "–ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –≥–æ—Ç–æ–≤—ã –ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç–æ–π–Ω—ã–µ –¥–µ–Ω—å–≥–∏",
                    "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –Ω–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–µ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è",
                    "–ù–µ –∑–Ω–∞—é, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Å–≤–æ–∏ —É—Å–ª—É–≥–∏",
                    "–ö–∞–∫ –Ω–∞–π—Ç–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤?",
                    "–ë–æ—é—Å—å, —á—Ç–æ –Ω–µ —Å–ø—Ä–∞–≤–ª—é—Å—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏"
                ],
                "solutions": [
                    "–ù–∞–≤—ã–∫–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–ª–∞—Ç—è—Ç –±–æ–ª—å—à–µ",
                    "–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è",
                    "–ü–æ–∏—Å–∫ –∏ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤",
                    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏",
                    "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞"
                ],
                "benefits": [
                    "–°–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –ø—Ä–µ–º–∏—É–º-–∫–∞—á–µ—Å—Ç–≤–∞",
                    "–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Å–≤–æ–∏ —É—Å–ª—É–≥–∏",
                    "–ù–∞—Ö–æ–¥–∏—Ç—å –∏ —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
                    "–£–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ"
                ],
                "salary_range": "–æ—Ç $1500 –∑–∞ –ø—Ä–æ–µ–∫—Ç",
                "time_to_result": "2-4 –º–µ—Å—è—Ü–∞",
                "tone": "–¥–µ–ª–æ–≤–æ–π, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–π",
                "target_channels": ["digoGraphickDesign", "digoUI"]  # –û–±–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤
            },
            "developers": {
                "pain_points": [
                    "–ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ö–æ—Ç—è—Ç –¥–∏–∑–∞–π–Ω–µ—Ä—ã",
                    "–ö–∞–∫ –ª—É—á—à–µ –∫–æ–º–º—É–Ω–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å –¥–∏–∑–∞–π–Ω-–∫–æ–º–∞–Ω–¥–æ–π?",
                    "–•–æ—á—É –ø–æ–Ω–∏–º–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã UX/UI –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–¥–∞",
                    "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
                    "–ù—É–∂–Ω—ã –ª–∏ –º–Ω–µ –Ω–∞–≤—ã–∫–∏ –¥–∏–∑–∞–π–Ω–∞ –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞?"
                ],
                "solutions": [
                    "–û–±—â–∏–π —è–∑—ã–∫ —Å –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º–∏",
                    "–ü—Ä–∏–Ω—Ü–∏–ø—ã UX/UI –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–¥–∞",
                    "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏—è",
                    "–ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞",
                    "–ù–∞–≤—ã–∫–∏ –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞"
                ],
                "benefits": [
                    "–ü–æ–Ω–∏–º–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã UX/UI –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–¥–∞",
                    "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∫–æ–º–º—É–Ω–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º–∏",
                    "–°–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—Ä–∞–≤—è—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏—è"
                ],
                "salary_range": "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ $500-1000",
                "time_to_result": "1-2 –º–µ—Å—è—Ü–∞",
                "tone": "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π, –ª–æ–≥–∏—á–Ω—ã–π",
                "target_channels": ["digoUI"]  # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            }
        }
        
        self.cta_variants = {
            "–º—è–≥–∫–∏–µ": [
                "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ? –ü–∏—à–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ üëá",
                "–°–æ—Ö—Ä–∞–Ω–∏ –ø–æ—Å—Ç - –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è! üíæ",
                "–ö–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –µ—Å—Ç—å –ø–æ —Ç–µ–º–µ? ü§î",
                "–î–µ–ª–∏—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö üí¨"
            ],
            "—Å—Ä–µ–¥–Ω–∏–µ": [
                "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –ø—É—Ç—å –≤ UX/UI? –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ üöÄ",
                "–•–æ—á–µ—à—å —Ç–∞–∫–æ–π –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç? –ó–∞–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –∫—É—Ä—Å üìù",
                "–ü–æ–ø—Ä–æ–±—É–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ - –ø–æ–π–º–∏, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ–±–µ –¥–∏–∑–∞–π–Ω ‚ú®",
                "–£–∑–Ω–∞–π –±–æ–ª—å—à–µ –æ –∫—É—Ä—Å–µ - —Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ üîó"
            ],
            "–∂–µ—Å—Ç–∫–∏–µ": [
                "–ó–∞–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –∫—É—Ä—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å - –º–µ—Å—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã! üî•",
                "–•–≤–∞—Ç–∏—Ç –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å! –ù–∞—á–Ω–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤ IT —É–∂–µ —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞ üí∞",
                "–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è - —Å–∫–∏–¥–∫–∞ 50%! –£—Å–ø–µ–π –∑–∞–ø–∏—Å–∞—Ç—å—Å—è ‚è∞",
                "–û—Å—Ç–∞–ª–æ—Å—å 5 –º–µ—Å—Ç –≤ –≥—Ä—É–ø–ø–µ - —Ç–æ—Ä–æ–ø–∏—Å—å! üéØ"
            ]
        }
        
        self.success_stories = {
            "–Ω–æ–≤–∏—á–∫–∏": [
                "–ê–Ω–Ω–∞, –±—ã–≤—à–∏–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä, —Ç–µ–ø–µ—Ä—å UX-–¥–∏–∑–∞–π–Ω–µ—Ä –≤ IT-–∫–æ–º–ø–∞–Ω–∏–∏",
                "–î–º–∏—Ç—Ä–∏–π, —Å—Ç—É–¥–µ–Ω—Ç, –Ω–∞—à–µ–ª —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ 2 –º–µ—Å—è—Ü–∞ –ø–æ—Å–ª–µ –∫—É—Ä—Å–∞"
            ],
            "junior": [
                "–ú–∏—Ö–∞–∏–ª, junior-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –ø–æ–ª—É—á–∏–ª –ø–æ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è UX",
                "–ï–ª–µ–Ω–∞, junior-–¥–∏–∑–∞–π–Ω–µ—Ä, —É—Å—Ç—Ä–æ–∏–ª–∞—Å—å –≤ –∫—Ä—É–ø–Ω—É—é IT-–∫–æ–º–ø–∞–Ω–∏—é"
            ],
            "freelancers": [
                "–ï–ª–µ–Ω–∞, —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä, —É–≤–µ–ª–∏—á–∏–ª–∞ –¥–æ—Ö–æ–¥ –≤ 3 —Ä–∞–∑–∞",
                "–ê–ª–µ–∫—Å–µ–π, —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä, –Ω–∞—à–µ–ª –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"
            ],
            "developers": [
                "–ú–∏—Ö–∞–∏–ª, junior-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –ø–æ–ª—É—á–∏–ª –ø–æ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è UX",
                "–°–µ—Ä–≥–µ–π, middle-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —É–ª—É—á—à–∏–ª –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é —Å –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º–∏"
            ]
        }

    def get_available_channels(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        return [
            {
                "name": channel_name,
                "chat_id": channel_data["chat_id"],
                "active": channel_data["active"]
            }
            for channel_name, channel_data in CHANNELS.items()
            if channel_data["active"]
        ]

    def get_next_posting_time(self, channel_name: str) -> datetime:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ"""
        today = datetime.now()
        weekday = today.strftime('%A').lower()
        
        if weekday in POSTING_SCHEDULE:
            times = POSTING_SCHEDULE[weekday]
            for time_str in times:
                hour, minute = map(int, time_str.split(':'))
                posting_time = today.replace(hour=hour, minute=minute, second=0, microsecond=0)
                
                if posting_time > today:
                    return posting_time
        
        # –ï—Å–ª–∏ –≤—Å–µ –≤—Ä–µ–º—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—à–ª–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è –∑–∞–≤—Ç—Ä–∞
        tomorrow = today + timedelta(days=1)
        next_weekday = tomorrow.strftime('%A').lower()
        
        if next_weekday in POSTING_SCHEDULE:
            first_time = POSTING_SCHEDULE[next_weekday][0]
            hour, minute = map(int, first_time.split(':'))
            return tomorrow.replace(hour=hour, minute=minute, second=0, microsecond=0)
        
        # Fallback - —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞
        return today + timedelta(hours=2)

    def generate_problem_solution_post(self, audience: str, cta_strength: str = "—Å—Ä–µ–¥–Ω–∏–µ") -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —Ç–∏–ø–∞ '–ü—Ä–æ–±–ª–µ–º–∞-–†–µ—à–µ–Ω–∏–µ'"""
        audience_data = self.audiences[audience]
        
        pain_point = random.choice(audience_data["pain_points"])
        solution = random.choice(audience_data["solutions"])
        benefits = random.sample(audience_data["benefits"], 3)
        cta = random.choice(self.cta_variants[cta_strength])
        success_story = random.choice(self.success_stories[audience])
        
        title = f"{pain_point}? –í–æ—Ç –∫–∞–∫ {audience} —Ä–µ—à–∞—é—Ç —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É –∑–∞ {audience_data['time_to_result']}"
        
        content = f"""–ó–Ω–∞–∫–æ–º–∞—è —Å–∏—Ç—É–∞—Ü–∏—è? "{pain_point}" - —ç—Ç–æ —Ç–æ, —Å —á–µ–º —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π {audience}.

–¢—ã —Ç—Ä–∞—Ç–∏—à—å —á–∞—Å—ã –Ω–∞ –∏–∑—É—á–µ–Ω–∏–µ, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ —Ä–∞–¥—É–µ—Ç. –ê –≤—Å–µ –ø–æ—Ç–æ–º—É, —á—Ç–æ –∏–∑—É—á–µ–Ω–∏–µ UX/UI - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ –∏ —Å—Ç–∞—Ç—å –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º".

{solution} - –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ {audience}.

–ù–∞ –Ω–∞—à–µ–º –∫—É—Ä—Å–µ —Ç—ã –Ω–∞—É—á–∏—à—å—Å—è:
‚úÖ {benefits[0]}
‚úÖ {benefits[1]}
‚úÖ {benefits[2]}

–ò —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ - –ø–æ–ª—É—á–∏—à—å —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.

{success_story}.

–ù–∞—à–∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫–∏ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ IT-–∫–æ–º–ø–∞–Ω–∏—è—Ö –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç {audience_data['salary_range']}.

{cta}

P.S. –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ - –ø–æ–ø—Ä–æ–±—É–π –∏ –ø–æ–π–º–∏, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ–±–µ UX/UI –¥–∏–∑–∞–π–Ω."""
        
        return {
            "type": "–ø—Ä–æ–±–ª–µ–º–∞-—Ä–µ—à–µ–Ω–∏–µ",
            "audience": audience,
            "title": title,
            "content": content,
            "cta_strength": cta_strength,
            "generated_at": datetime.now().isoformat()
        }

    def generate_success_story_post(self, audience: str, cta_strength: str = "—Å—Ä–µ–¥–Ω–∏–µ") -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —Ç–∏–ø–∞ '–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—Ö–∞'"""
        audience_data = self.audiences[audience]
        success_story = random.choice(self.success_stories[audience])
        pain_point = random.choice(audience_data["pain_points"])
        benefits = random.sample(audience_data["benefits"], 3)
        cta = random.choice(self.cta_variants[cta_strength])
        
        title = f"–û—Ç {audience} –¥–æ UX-–¥–∏–∑–∞–π–Ω–µ—Ä–∞ –∑–∞ {audience_data['time_to_result']}. –ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—Ö–∞"
        
        content = f"""–ó–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å {audience} - {success_story}.

"{pain_point}" - –∏–º–µ–Ω–Ω–æ —Å —ç—Ç–æ–≥–æ –Ω–∞—á–∏–Ω–∞–ª—Å—è –ø—É—Ç—å –Ω–∞—à–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞.

"–Ø {audience}, –Ω–æ —Ö–æ—Ç–µ–ª –±–æ–ª—å—à–µ–≥–æ. {pain_point} - —ç—Ç–æ —Ç–æ, —á—Ç–æ –º–µ–Ω—è –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–æ.

–î—É–º–∞–ª, —á—Ç–æ –¥–∏–∑–∞–π–Ω - —ç—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —É–º–µ–µ—Ç —Ä–∏—Å–æ–≤–∞—Ç—å. –û–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ {audience_data['solutions'][0]}."

–ù–∞—à –∫—É—Ä—Å –¥–∞–ª {audience} –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ:

{benefits[0]}
{benefits[1]}
{benefits[2]}

–°–µ–π—á–∞—Å {success_story} –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç {audience_data['salary_range']}.

"UX/UI –¥–∏–∑–∞–π–Ω - —ç—Ç–æ –Ω–µ –º–∞–≥–∏—è, –∞ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è. –ì–ª–∞–≤–Ω–æ–µ - –Ω–∞—á–∞—Ç—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –±–∞–∑—ã."

{cta}

–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—Ö–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–µ–π! üöÄ"""
        
        return {
            "type": "–∏—Å—Ç–æ—Ä–∏—è-—É—Å–ø–µ—Ö–∞",
            "audience": audience,
            "title": title,
            "content": content,
            "cta_strength": cta_strength,
            "generated_at": datetime.now().isoformat()
        }

    def generate_educational_post(self, audience: str, tool: str = "Figma", cta_strength: str = "–º—è–≥–∫–∏–µ") -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        audience_data = self.audiences[audience]
        benefit = random.choice(audience_data["benefits"])
        pain_point = random.choice(audience_data["pain_points"])
        solution = random.choice(audience_data["solutions"])
        cta = random.choice(self.cta_variants[cta_strength])
        
        title = f"{tool}: {benefit} –¥–ª—è {audience}"
        
        content = f"""{audience} —á–∞—Å—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç: "–ö–∞–∫ {benefit}?"

–°–µ–≥–æ–¥–Ω—è —Ä–∞–∑–±–∏—Ä–∞–µ–º {tool} - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ–Ω–∏—Ç —Ç–≤–æ–π –ø–æ–¥—Ö–æ–¥ –∫ –¥–∏–∑–∞–π–Ω—É.

üéØ –ß—Ç–æ —Ç–∞–∫–æ–µ {tool}:
- {benefit}
- {audience_data['benefits'][0]}
- {audience_data['benefits'][1]}

üîß –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. {audience_data['solutions'][0]}
2. {audience_data['solutions'][1]}
3. {audience_data['solutions'][2]}

üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç:
"{pain_point}" - —ç—Ç–æ —á–∞—Å—Ç–∞—è –æ—à–∏–±–∫–∞ {audience}. {solution} –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã.

{tool} - —ç—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –æ—Å–≤–æ–∏—à—å –Ω–∞ –∫—É—Ä—Å–µ.

{cta}"""
        
        return {
            "type": "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π",
            "audience": audience,
            "tool": tool,
            "title": title,
            "content": content,
            "cta_strength": cta_strength,
            "generated_at": datetime.now().isoformat()
        }

    def generate_promo_post(self, audience: str, cta_strength: str = "–∂–µ—Å—Ç–∫–∏–µ") -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ-–ø–æ—Å—Ç–∞"""
        audience_data = self.audiences[audience]
        pain_point = random.choice(audience_data["pain_points"])
        benefits = random.sample(audience_data["benefits"], 4)
        success_story = random.choice(self.success_stories[audience])
        cta = random.choice(self.cta_variants[cta_strength])
        
        title = f"üöÄ {audience}: {audience_data['benefits'][0]} –∑–∞ {audience_data['time_to_result']}"
        
        content = f""""{pain_point}" - –∑–Ω–∞–∫–æ–º–∞—è –ø—Ä–æ–±–ª–µ–º–∞?

–ù–∞—à –∫—É—Ä—Å —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è {audience}, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç {audience_data['benefits'][0]}.

‚úÖ {audience_data['solutions'][0]}
‚úÖ {benefits[0]}
‚úÖ {benefits[1]}
‚úÖ {benefits[2]}
‚úÖ –†–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∫—É—Ä—Å–∞

{success_story}.

–ù–∞—à–∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –∫–æ–º–ø–∞–Ω–∏—è—Ö –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç {audience_data['salary_range']}.

üî• –¢–æ–ª—å–∫–æ –¥–æ –ø—è—Ç–Ω–∏—Ü—ã - —Å–∫–∏–¥–∫–∞ 30% + –±–æ–Ω—É—Å–Ω—ã–π –º–æ–¥—É–ª—å

{cta}"""
        
        return {
            "type": "–ø—Ä–æ–º–æ",
            "audience": audience,
            "title": title,
            "content": content,
            "cta_strength": cta_strength,
            "generated_at": datetime.now().isoformat()
        }

    def create_post_via_api(self, post_data: Dict, channel_id: str, scheduled_time: datetime) -> bool:
        """–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç —á–µ—Ä–µ–∑ API"""
        try:
            api_url = f"{self.api_base_url}/api/posts"
            
            payload = {
                "content": post_data["content"],
                "channel_id": channel_id,
                "scheduled_time": scheduled_time.isoformat(),
                "media_path": None,
                "media_type": None
            }
            
            response = requests.post(api_url, json=payload)
            
            if response.status_code == 200:
                print(f"‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            return False

    def auto_schedule_content(self, audience: str, post_type: str = "–ø—Ä–æ–±–ª–µ–º–∞-—Ä–µ—à–µ–Ω–∏–µ", 
                            cta_strength: str = "—Å—Ä–µ–¥–Ω–∏–µ", days_ahead: int = 7) -> List[Dict]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
        audience_data = self.audiences[audience]
        target_channels = audience_data["target_channels"]
        
        scheduled_posts = []
        
        for channel_name in target_channels:
            if channel_name not in CHANNELS:
                print(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                continue
                
            channel_id = CHANNELS[channel_name]["chat_id"]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
            for day in range(days_ahead):
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                if post_type == "–ø—Ä–æ–±–ª–µ–º–∞-—Ä–µ—à–µ–Ω–∏–µ":
                    post_data = self.generate_problem_solution_post(audience, cta_strength)
                elif post_type == "–∏—Å—Ç–æ—Ä–∏—è-—É—Å–ø–µ—Ö–∞":
                    post_data = self.generate_success_story_post(audience, cta_strength)
                elif post_type == "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π":
                    post_data = self.generate_educational_post(audience, "Figma", cta_strength)
                elif post_type == "–ø—Ä–æ–º–æ":
                    post_data = self.generate_promo_post(audience, cta_strength)
                else:
                    post_data = self.generate_problem_solution_post(audience, cta_strength)
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                scheduled_time = self.get_next_posting_time(channel_name)
                scheduled_time += timedelta(days=day)
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç —á–µ—Ä–µ–∑ API
                success = self.create_post_via_api(post_data, channel_id, scheduled_time)
                
                if success:
                    scheduled_posts.append({
                        "post_data": post_data,
                        "channel_id": channel_id,
                        "channel_name": channel_name,
                        "scheduled_time": scheduled_time,
                        "status": "scheduled"
                    })
        
        return scheduled_posts

    def generate_and_preview(self, audience: str, post_type: str = "–ø—Ä–æ–±–ª–µ–º–∞-—Ä–µ—à–µ–Ω–∏–µ", 
                           cta_strength: str = "—Å—Ä–µ–¥–Ω–∏–µ") -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        if post_type == "–ø—Ä–æ–±–ª–µ–º–∞-—Ä–µ—à–µ–Ω–∏–µ":
            post_data = self.generate_problem_solution_post(audience, cta_strength)
        elif post_type == "–∏—Å—Ç–æ—Ä–∏—è-—É—Å–ø–µ—Ö–∞":
            post_data = self.generate_success_story_post(audience, cta_strength)
        elif post_type == "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π":
            post_data = self.generate_educational_post(audience, "Figma", cta_strength)
        elif post_type == "–ø—Ä–æ–º–æ":
            post_data = self.generate_promo_post(audience, cta_strength)
        else:
            post_data = self.generate_problem_solution_post(audience, cta_strength)
        
        return {
            "post_data": post_data,
            "available_channels": self.get_available_channels(),
            "next_posting_times": {
                channel["name"]: self.get_next_posting_time(channel["name"])
                for channel in self.get_available_channels()
            }
        }

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    generator = IntegratedContentGenerator()
    
    print("üéØ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è UX/UI –∫—É—Ä—Å–∞")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    print("\nüì¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:")
    channels = generator.get_available_channels()
    for channel in channels:
        print(f"  - {channel['name']} ({channel['chat_id']})")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    print("\nüìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞:")
    preview = generator.generate_and_preview("–Ω–æ–≤–∏—á–∫–∏", "–ø—Ä–æ–±–ª–µ–º–∞-—Ä–µ—à–µ–Ω–∏–µ", "—Å—Ä–µ–¥–Ω–∏–µ")
    
    print(f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {preview['post_data']['audience']}")
    print(f"–¢–∏–ø –ø–æ—Å—Ç–∞: {preview['post_data']['type']}")
    print(f"CTA: {preview['post_data']['cta_strength']}")
    print(f"\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: {preview['post_data']['title']}")
    print(f"\n–ö–æ–Ω—Ç–µ–Ω—Ç:\n{preview['post_data']['content']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    print("\n‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
    for channel_name, posting_time in preview['next_posting_times'].items():
        print(f"  - {channel_name}: {posting_time.strftime('%d.%m.%Y %H:%M')}")
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
    print("\n" + "=" * 60)
    response = input("–•–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏? (y/n): ")
    
    if response.lower() == 'y':
        audience = input("–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é (–Ω–æ–≤–∏—á–∫–∏/junior/freelancers/developers): ")
        post_type = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–∞ (–ø—Ä–æ–±–ª–µ–º–∞-—Ä–µ—à–µ–Ω–∏–µ/–∏—Å—Ç–æ—Ä–∏—è-—É—Å–ø–µ—Ö–∞/–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π/–ø—Ä–æ–º–æ): ")
        days = int(input("–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å? (1-30): "))
        
        print(f"\nüöÄ –ü–ª–∞–Ω–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è {audience} –Ω–∞ {days} –¥–Ω–µ–π...")
        scheduled = generator.auto_schedule_content(audience, post_type, "—Å—Ä–µ–¥–Ω–∏–µ", days)
        
        print(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {len(scheduled)} –ø–æ—Å—Ç–æ–≤")
        for post in scheduled:
            print(f"  - {post['channel_name']}: {post['scheduled_time'].strftime('%d.%m.%Y %H:%M')}")

if __name__ == "__main__":
    main() 