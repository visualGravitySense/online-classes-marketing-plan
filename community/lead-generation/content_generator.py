#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–Ω—Ç–µ–Ω—Ç-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è UX/UI –∫—É—Ä—Å–∞
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –¥–ª—è 4 —Ü–µ–ª–µ–≤—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π
"""

import json
import random
from datetime import datetime
from typing import Dict, List, Optional

class ContentGenerator:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        self.audiences = {
            "–Ω–æ–≤–∏—á–∫–∏": {
                "pain_points": [
                    "–ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ UX/UI",
                    "–ë–æ—é—Å—å, —á—Ç–æ —É –º–µ–Ω—è –Ω–µ—Ç —Ç–∞–ª–∞–Ω—Ç–∞ –∫ –¥–∏–∑–∞–π–Ω—É",
                    "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º?",
                    "–ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω–æ –∏–∑—É—á–∞—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?",
                    "–ö–∞–∫ –ø–æ–Ω—è—Ç—å, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –º–Ω–µ —ç—Ç–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è?"
                ],
                "solutions": [
                    "–ü–æ—à–∞–≥–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å –Ω—É–ª—è –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π",
                    "–ü–æ–Ω—è—Ç–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π",
                    "–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –∫—É—Ä—Å–∞",
                    "–ü–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
                    "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞"
                ],
                "benefits": [
                    "–°–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Å –Ω—É–ª—è",
                    "–ü—Ä–æ–≤–æ–¥–∏—Ç—å UX-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É",
                    "–†–∞–±–æ—Ç–∞—Ç—å –≤ Figma –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ",
                    "–°–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã"
                ],
                "salary_range": "–æ—Ç $500 –¥–æ $1200",
                "time_to_result": "3-6 –º–µ—Å—è—Ü–µ–≤",
                "tone": "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π"
            },
            "junior": {
                "pain_points": [
                    "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—É—é —Ä–∞–±–æ—Ç—É –≤ IT",
                    "–ú–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–µ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ HR",
                    "–ù–µ –∑–Ω–∞—é, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–µ–∑–µ–Ω—Ç–æ–≤–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã",
                    "–ë–æ—é—Å—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π - –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç",
                    "–ö–∞–∫ –ø–µ—Ä–µ–π—Ç–∏ –æ—Ç —É—á–µ–±–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∫ —Ä–µ–∞–ª—å–Ω—ã–º?"
                ],
                "solutions": [
                    "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–º–µ—Ç—è—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–∏",
                    "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º",
                    "–†–µ–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
                    "–°–≤—è–∑–∏ –≤ IT-–∏–Ω–¥—É—Å—Ç—Ä–∏–∏",
                    "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç—ã"
                ],
                "benefits": [
                    "–°–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤–ª–µ–∫–∞—é—Ç HR",
                    "–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–µ–∑–µ–Ω—Ç–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ä–∞–±–æ—Ç—ã",
                    "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º –≤ IT",
                    "–ù–∞–π—Ç–∏ —Å–≤—è–∑–∏ –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏"
                ],
                "salary_range": "–æ—Ç $1200 –¥–æ $2500",
                "time_to_result": "1-3 –º–µ—Å—è—Ü–∞",
                "tone": "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π"
            },
            "freelancers": {
                "pain_points": [
                    "–ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –≥–æ—Ç–æ–≤—ã –ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç–æ–π–Ω—ã–µ –¥–µ–Ω—å–≥–∏",
                    "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –Ω–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–µ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è",
                    "–ù–µ –∑–Ω–∞—é, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Å–≤–æ–∏ —É—Å–ª—É–≥–∏",
                    "–ö–∞–∫ –Ω–∞–π—Ç–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤?",
                    "–ë–æ—é—Å—å, —á—Ç–æ –Ω–µ —Å–ø—Ä–∞–≤–ª—é—Å—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏"
                ],
                "solutions": [
                    "–ù–∞–≤—ã–∫–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–ª–∞—Ç—è—Ç –±–æ–ª—å—à–µ",
                    "–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è",
                    "–ü–æ–∏—Å–∫ –∏ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤",
                    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏",
                    "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞"
                ],
                "benefits": [
                    "–°–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –ø—Ä–µ–º–∏—É–º-–∫–∞—á–µ—Å—Ç–≤–∞",
                    "–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Å–≤–æ–∏ —É—Å–ª—É–≥–∏",
                    "–ù–∞—Ö–æ–¥–∏—Ç—å –∏ —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
                    "–£–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ"
                ],
                "salary_range": "–æ—Ç $1500 –∑–∞ –ø—Ä–æ–µ–∫—Ç",
                "time_to_result": "2-4 –º–µ—Å—è—Ü–∞",
                "tone": "–¥–µ–ª–æ–≤–æ–π, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–π"
            },
            "developers": {
                "pain_points": [
                    "–ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ö–æ—Ç—è—Ç –¥–∏–∑–∞–π–Ω–µ—Ä—ã",
                    "–ö–∞–∫ –ª—É—á—à–µ –∫–æ–º–º—É–Ω–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å –¥–∏–∑–∞–π–Ω-–∫–æ–º–∞–Ω–¥–æ–π?",
                    "–•–æ—á—É –ø–æ–Ω–∏–º–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã UX/UI –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–¥–∞",
                    "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
                    "–ù—É–∂–Ω—ã –ª–∏ –º–Ω–µ –Ω–∞–≤—ã–∫–∏ –¥–∏–∑–∞–π–Ω–∞ –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞?"
                ],
                "solutions": [
                    "–û–±—â–∏–π —è–∑—ã–∫ —Å –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º–∏",
                    "–ü—Ä–∏–Ω—Ü–∏–ø—ã UX/UI –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–¥–∞",
                    "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏—è",
                    "–ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞",
                    "–ù–∞–≤—ã–∫–∏ –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞"
                ],
                "benefits": [
                    "–ü–æ–Ω–∏–º–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã UX/UI –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–¥–∞",
                    "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∫–æ–º–º—É–Ω–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º–∏",
                    "–°–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—Ä–∞–≤—è—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏—è"
                ],
                "salary_range": "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ $500-1000",
                "time_to_result": "1-2 –º–µ—Å—è—Ü–∞",
                "tone": "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π, –ª–æ–≥–∏—á–Ω—ã–π"
            }
        }
        
        self.cta_variants = {
            "–º—è–≥–∫–∏–µ": [
                "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ? –ü–∏—à–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ üëá",
                "–°–æ—Ö—Ä–∞–Ω–∏ –ø–æ—Å—Ç - –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è! üíæ",
                "–ö–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –µ—Å—Ç—å –ø–æ —Ç–µ–º–µ? ü§î",
                "–î–µ–ª–∏—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö üí¨"
            ],
            "—Å—Ä–µ–¥–Ω–∏–µ": [
                "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –ø—É—Ç—å –≤ UX/UI? –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ üöÄ",
                "–•–æ—á–µ—à—å —Ç–∞–∫–æ–π –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç? –ó–∞–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –∫—É—Ä—Å üìù",
                "–ü–æ–ø—Ä–æ–±—É–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ - –ø–æ–π–º–∏, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ–±–µ –¥–∏–∑–∞–π–Ω ‚ú®",
                "–£–∑–Ω–∞–π –±–æ–ª—å—à–µ –æ –∫—É—Ä—Å–µ - —Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ üîó"
            ],
            "–∂–µ—Å—Ç–∫–∏–µ": [
                "–ó–∞–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –∫—É—Ä—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å - –º–µ—Å—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã! üî•",
                "–•–≤–∞—Ç–∏—Ç –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å! –ù–∞—á–Ω–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤ IT —É–∂–µ —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞ üí∞",
                "–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è - —Å–∫–∏–¥–∫–∞ 50%! –£—Å–ø–µ–π –∑–∞–ø–∏—Å–∞—Ç—å—Å—è ‚è∞",
                "–û—Å—Ç–∞–ª–æ—Å—å 5 –º–µ—Å—Ç –≤ –≥—Ä—É–ø–ø–µ - —Ç–æ—Ä–æ–ø–∏—Å—å! üéØ"
            ]
        }
        
        self.success_stories = {
            "–Ω–æ–≤–∏—á–∫–∏": [
                "–ê–Ω–Ω–∞, –±—ã–≤—à–∏–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä, —Ç–µ–ø–µ—Ä—å UX-–¥–∏–∑–∞–π–Ω–µ—Ä –≤ IT-–∫–æ–º–ø–∞–Ω–∏–∏",
                "–î–º–∏—Ç—Ä–∏–π, —Å—Ç—É–¥–µ–Ω—Ç, –Ω–∞—à–µ–ª —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ 2 –º–µ—Å—è—Ü–∞ –ø–æ—Å–ª–µ –∫—É—Ä—Å–∞"
            ],
            "junior": [
                "–ú–∏—Ö–∞–∏–ª, junior-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –ø–æ–ª—É—á–∏–ª –ø–æ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è UX",
                "–ï–ª–µ–Ω–∞, junior-–¥–∏–∑–∞–π–Ω–µ—Ä, —É—Å—Ç—Ä–æ–∏–ª–∞—Å—å –≤ –∫—Ä—É–ø–Ω—É—é IT-–∫–æ–º–ø–∞–Ω–∏—é"
            ],
            "freelancers": [
                "–ï–ª–µ–Ω–∞, —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä, —É–≤–µ–ª–∏—á–∏–ª–∞ –¥–æ—Ö–æ–¥ –≤ 3 —Ä–∞–∑–∞",
                "–ê–ª–µ–∫—Å–µ–π, —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä, –Ω–∞—à–µ–ª –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"
            ],
            "developers": [
                "–ú–∏—Ö–∞–∏–ª, junior-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –ø–æ–ª—É—á–∏–ª –ø–æ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è UX",
                "–°–µ—Ä–≥–µ–π, middle-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —É–ª—É—á—à–∏–ª –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é —Å –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º–∏"
            ]
        }

    def generate_problem_solution_post(self, audience: str, cta_strength: str = "—Å—Ä–µ–¥–Ω–∏–µ") -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —Ç–∏–ø–∞ '–ü—Ä–æ–±–ª–µ–º–∞-–†–µ—à–µ–Ω–∏–µ'"""
        audience_data = self.audiences[audience]
        
        pain_point = random.choice(audience_data["pain_points"])
        solution = random.choice(audience_data["solutions"])
        benefits = random.sample(audience_data["benefits"], 3)
        cta = random.choice(self.cta_variants[cta_strength])
        success_story = random.choice(self.success_stories[audience])
        
        title = f"{pain_point}? –í–æ—Ç –∫–∞–∫ {audience} —Ä–µ—à–∞—é—Ç —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É –∑–∞ {audience_data['time_to_result']}"
        
        content = f"""–ó–Ω–∞–∫–æ–º–∞—è —Å–∏—Ç—É–∞—Ü–∏—è? "{pain_point}" - —ç—Ç–æ —Ç–æ, —Å —á–µ–º —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π {audience}.

–¢—ã —Ç—Ä–∞—Ç–∏—à—å —á–∞—Å—ã –Ω–∞ –∏–∑—É—á–µ–Ω–∏–µ, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ —Ä–∞–¥—É–µ—Ç. –ê –≤—Å–µ –ø–æ—Ç–æ–º—É, —á—Ç–æ –∏–∑—É—á–µ–Ω–∏–µ UX/UI - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ –∏ —Å—Ç–∞—Ç—å –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º".

{solution} - –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ {audience}.

–ù–∞ –Ω–∞—à–µ–º –∫—É—Ä—Å–µ —Ç—ã –Ω–∞—É—á–∏—à—å—Å—è:
‚úÖ {benefits[0]}
‚úÖ {benefits[1]}
‚úÖ {benefits[2]}

–ò —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ - –ø–æ–ª—É—á–∏—à—å —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.

{success_story}.

–ù–∞—à–∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫–∏ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ IT-–∫–æ–º–ø–∞–Ω–∏—è—Ö –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç {audience_data['salary_range']}.

{cta}

P.S. –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ - –ø–æ–ø—Ä–æ–±—É–π –∏ –ø–æ–π–º–∏, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ–±–µ UX/UI –¥–∏–∑–∞–π–Ω."""
        
        return {
            "type": "–ø—Ä–æ–±–ª–µ–º–∞-—Ä–µ—à–µ–Ω–∏–µ",
            "audience": audience,
            "title": title,
            "content": content,
            "cta_strength": cta_strength,
            "generated_at": datetime.now().isoformat()
        }

    def generate_success_story_post(self, audience: str, cta_strength: str = "—Å—Ä–µ–¥–Ω–∏–µ") -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —Ç–∏–ø–∞ '–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—Ö–∞'"""
        audience_data = self.audiences[audience]
        success_story = random.choice(self.success_stories[audience])
        pain_point = random.choice(audience_data["pain_points"])
        benefits = random.sample(audience_data["benefits"], 3)
        cta = random.choice(self.cta_variants[cta_strength])
        
        title = f"–û—Ç {audience} –¥–æ UX-–¥–∏–∑–∞–π–Ω–µ—Ä–∞ –∑–∞ {audience_data['time_to_result']}. –ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—Ö–∞"
        
        content = f"""–ó–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å {audience} - {success_story}.

"{pain_point}" - –∏–º–µ–Ω–Ω–æ —Å —ç—Ç–æ–≥–æ –Ω–∞—á–∏–Ω–∞–ª—Å—è –ø—É—Ç—å –Ω–∞—à–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞.

"–Ø {audience}, –Ω–æ —Ö–æ—Ç–µ–ª –±–æ–ª—å—à–µ–≥–æ. {pain_point} - —ç—Ç–æ —Ç–æ, —á—Ç–æ –º–µ–Ω—è –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–æ.

–î—É–º–∞–ª, —á—Ç–æ –¥–∏–∑–∞–π–Ω - —ç—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —É–º–µ–µ—Ç —Ä–∏—Å–æ–≤–∞—Ç—å. –û–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ {audience_data['solutions'][0]}."

–ù–∞—à –∫—É—Ä—Å –¥–∞–ª {audience} –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ:

{benefits[0]}
{benefits[1]}
{benefits[2]}

–°–µ–π—á–∞—Å {success_story} –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç {audience_data['salary_range']}.

"UX/UI –¥–∏–∑–∞–π–Ω - —ç—Ç–æ –Ω–µ –º–∞–≥–∏—è, –∞ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è. –ì–ª–∞–≤–Ω–æ–µ - –Ω–∞—á–∞—Ç—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –±–∞–∑—ã."

{cta}

–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—Ö–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–µ–π! üöÄ"""
        
        return {
            "type": "–∏—Å—Ç–æ—Ä–∏—è-—É—Å–ø–µ—Ö–∞",
            "audience": audience,
            "title": title,
            "content": content,
            "cta_strength": cta_strength,
            "generated_at": datetime.now().isoformat()
        }

    def generate_educational_post(self, audience: str, tool: str = "Figma", cta_strength: str = "–º—è–≥–∫–∏–µ") -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        audience_data = self.audiences[audience]
        benefit = random.choice(audience_data["benefits"])
        pain_point = random.choice(audience_data["pain_points"])
        solution = random.choice(audience_data["solutions"])
        cta = random.choice(self.cta_variants[cta_strength])
        
        title = f"{tool}: {benefit} –¥–ª—è {audience}"
        
        content = f"""{audience} —á–∞—Å—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç: "–ö–∞–∫ {benefit}?"

–°–µ–≥–æ–¥–Ω—è —Ä–∞–∑–±–∏—Ä–∞–µ–º {tool} - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ–Ω–∏—Ç —Ç–≤–æ–π –ø–æ–¥—Ö–æ–¥ –∫ –¥–∏–∑–∞–π–Ω—É.

üéØ –ß—Ç–æ —Ç–∞–∫–æ–µ {tool}:
- {benefit}
- {audience_data['benefits'][0]}
- {audience_data['benefits'][1]}

üîß –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. {audience_data['solutions'][0]}
2. {audience_data['solutions'][1]}
3. {audience_data['solutions'][2]}

üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç:
"{pain_point}" - —ç—Ç–æ —á–∞—Å—Ç–∞—è –æ—à–∏–±–∫–∞ {audience}. {solution} –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã.

{tool} - —ç—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –æ—Å–≤–æ–∏—à—å –Ω–∞ –∫—É—Ä—Å–µ.

{cta}"""
        
        return {
            "type": "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π",
            "audience": audience,
            "tool": tool,
            "title": title,
            "content": content,
            "cta_strength": cta_strength,
            "generated_at": datetime.now().isoformat()
        }

    def generate_promo_post(self, audience: str, cta_strength: str = "–∂–µ—Å—Ç–∫–∏–µ") -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ-–ø–æ—Å—Ç–∞"""
        audience_data = self.audiences[audience]
        pain_point = random.choice(audience_data["pain_points"])
        benefits = random.sample(audience_data["benefits"], 4)
        success_story = random.choice(self.success_stories[audience])
        cta = random.choice(self.cta_variants[cta_strength])
        
        title = f"üöÄ {audience}: {audience_data['benefits'][0]} –∑–∞ {audience_data['time_to_result']}"
        
        content = f""""{pain_point}" - –∑–Ω–∞–∫–æ–º–∞—è –ø—Ä–æ–±–ª–µ–º–∞?

–ù–∞—à –∫—É—Ä—Å —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è {audience}, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç {audience_data['benefits'][0]}.

‚úÖ {audience_data['solutions'][0]}
‚úÖ {benefits[0]}
‚úÖ {benefits[1]}
‚úÖ {benefits[2]}
‚úÖ –†–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∫—É—Ä—Å–∞

{success_story}.

–ù–∞—à–∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –∫–æ–º–ø–∞–Ω–∏—è—Ö –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç {audience_data['salary_range']}.

üî• –¢–æ–ª—å–∫–æ –¥–æ –ø—è—Ç–Ω–∏—Ü—ã - —Å–∫–∏–¥–∫–∞ 30% + –±–æ–Ω—É—Å–Ω—ã–π –º–æ–¥—É–ª—å

{cta}"""
        
        return {
            "type": "–ø—Ä–æ–º–æ",
            "audience": audience,
            "title": title,
            "content": content,
            "cta_strength": cta_strength,
            "generated_at": datetime.now().isoformat()
        }

    def generate_content_batch(self, post_types: List[str] = None, audiences: List[str] = None, 
                             cta_strength: str = "—Å—Ä–µ–¥–Ω–∏–µ") -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞—Ç—á–∞ –ø–æ—Å—Ç–æ–≤"""
        if post_types is None:
            post_types = ["–ø—Ä–æ–±–ª–µ–º–∞-—Ä–µ—à–µ–Ω–∏–µ", "–∏—Å—Ç–æ—Ä–∏—è-—É—Å–ø–µ—Ö–∞", "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π", "–ø—Ä–æ–º–æ"]
        
        if audiences is None:
            audiences = list(self.audiences.keys())
        
        posts = []
        
        for audience in audiences:
            for post_type in post_types:
                if post_type == "–ø—Ä–æ–±–ª–µ–º–∞-—Ä–µ—à–µ–Ω–∏–µ":
                    post = self.generate_problem_solution_post(audience, cta_strength)
                elif post_type == "–∏—Å—Ç–æ—Ä–∏—è-—É—Å–ø–µ—Ö–∞":
                    post = self.generate_success_story_post(audience, cta_strength)
                elif post_type == "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π":
                    post = self.generate_educational_post(audience, "Figma", cta_strength)
                elif post_type == "–ø—Ä–æ–º–æ":
                    post = self.generate_promo_post(audience, cta_strength)
                
                posts.append(post)
        
        return posts

    def export_to_telegram_format(self, posts: List[Dict]) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ—Å—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Telegram"""
        telegram_posts = []
        
        for i, post in enumerate(posts, 1):
            telegram_post = f"""üìù –ü–û–°–¢ #{i} - {post['type'].upper()}
üéØ –ê–£–î–ò–¢–û–†–ò–Ø: {post['audience']}
üìä CTA: {post['cta_strength']}

üìå –ó–ê–ì–û–õ–û–í–û–ö:
{post['title']}

üì± –ö–û–ù–¢–ï–ù–¢:
{post['content']}

---
"""
            telegram_posts.append(telegram_post)
        
        return "\n".join(telegram_posts)

    def save_to_json(self, posts: List[Dict], filename: str = None) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –≤ JSON —Ñ–∞–π–ª"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"generated_content_{timestamp}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(posts, f, ensure_ascii=False, indent=2)
        
        return filename

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    generator = ContentGenerator()
    
    print("üéØ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è UX/UI –∫—É—Ä—Å–∞")
    print("=" * 50)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    audiences = ["–Ω–æ–≤–∏—á–∫–∏", "junior", "freelancers", "developers"]
    
    for audience in audiences:
        print(f"\nüìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {audience}")
        print("-" * 40)
        
        # –ü—Ä–æ–±–ª–µ–º–∞-—Ä–µ—à–µ–Ω–∏–µ –ø–æ—Å—Ç
        post = generator.generate_problem_solution_post(audience, "—Å—Ä–µ–¥–Ω–∏–µ")
        print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {post['title']}")
        print(f"–¢–∏–ø: {post['type']}")
        print(f"CTA: {post['cta_strength']}")
        print()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –±–∞—Ç—á
    print("\nüöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –±–∞—Ç—á –ø–æ—Å—Ç–æ–≤...")
    batch = generator.generate_content_batch()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
    filename = generator.save_to_json(batch)
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: {filename}")
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è Telegram
    telegram_content = generator.export_to_telegram_format(batch[:4])  # –ü–µ—Ä–≤—ã–µ 4 –ø–æ—Å—Ç–∞
    print(f"\nüì± Telegram —Ñ–æ—Ä–º–∞—Ç (–ø–µ—Ä–≤—ã–µ 4 –ø–æ—Å—Ç–∞):")
    print("=" * 50)
    print(telegram_content)

if __name__ == "__main__":
    main() 